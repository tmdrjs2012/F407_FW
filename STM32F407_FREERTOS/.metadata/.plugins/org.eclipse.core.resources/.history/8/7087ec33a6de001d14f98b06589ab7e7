/*
 * app.c
 *
 *  Created on: 2023. 2. 19.
 *      Author: encanto
 */

#ifndef SRC_APP_APP_C_
#define SRC_APP_APP_C_

/* Includes ------------------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "app.h"
/* USER CODE END Includes */

/*
 *  brief: application initialize function
 */

//extern uart_t   uart_tbl[UART_MAX_CH];

static void threadLed1(void const *argment);
static void threadLed2(void const *argment);

typedef struct _T_MESSAGE
{
	char * String;
	uint8_t state;
}
sTaskMessage;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	static uint32_t  pTick = 0;

	if(GPIO_Pin == GPIO_PIN_0)
	{
		if(HAL_GetTick() - pTick > 300)
		{
			pTick = HAL_GetTick();
			Gpio_Toggle(GPIOD, 1 << 15);
		}
	}
}

void appInit(void)
{

	osMessageQDef(myQueue01, 16, sTaskMessage);
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
			;
	if(SimpleQueue == 0)
	{
		// fail
	}
	else
	{

	}

	osThreadDef(threadLed1, threadLed1, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
				_HW_DEF_RTOS_THREAD_MEM_LED);

	if(osThreadCreate(osThread(threadLed1), NULL) != NULL)
	{
		// Do Thread
	}
	else
	{
		// Fail
		while(1);
	}

	/* Create the thread(s) */
	osThreadDef(threadLed2, threadLed2, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
				_HW_DEF_RTOS_THREAD_MEM_LED);

	if(osThreadCreate(osThread(threadLed2), NULL) != NULL)
	{
		// Do Thread
	}
	else
	{
		// Fail
		while(1);
	}
}

/*
 *  brief: application Main loop function
 */
void appMain(void)
{
	osKernelStart();

	while(1)
	{
	}
}

static void threadLed1(void const *argument)
{
	UNUSED(argument);

	while(1)
	{
		xQueueSend()
		//Gpio_Write(GPIOD, 1 << 12, 1);
		Gpio_Toggle(GPIOD, 1 << 12);
		delay(500);
	}

}

static void threadLed2(void const *argument)
{
	UNUSED(argument);

	while(1)
	{
		Gpio_Toggle(GPIOD, 1 << 14);
		delay(1000);
	}
}
#endif /* SRC_APP_APP_C_ */
