
F407_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080029d4  080029d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080029dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          0000197c  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000198c  2000198c  00020010  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000c758  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002424  00000000  00000000  0002c796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000068a9  00000000  00000000  0002ebba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00035468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00035e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7be  00000000  00000000  00036988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ff3  00000000  00000000  00061146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010329c  00000000  00000000  00075139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001783d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a78  00000000  00000000  00178428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002944 	.word	0x08002944

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002944 	.word	0x08002944

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <threadLed2>:
		delay(1000);
	}
}

static void threadLed2(void const *argument)
{
 80004d4:	b500      	push	{lr}
 80004d6:	b085      	sub	sp, #20
	while(1)
	{
		// get message queue

#if MessageQueueType
		eRValue = osMessageGet(myQueue01Handle,500);
 80004d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <threadLed2+0x28>)
 80004de:	6819      	ldr	r1, [r3, #0]
 80004e0:	a801      	add	r0, sp, #4
 80004e2:	f000 f9ce 	bl	8000882 <osMessageGet>

		if(eRValue.status == osEventMessage)
 80004e6:	9b01      	ldr	r3, [sp, #4]
 80004e8:	2b10      	cmp	r3, #16
 80004ea:	d1f5      	bne.n	80004d8 <threadLed2+0x4>
		{
			pRMessage = eRValue.value.p;
			Gpio_Write(GPIOD, 1 << 14 , pRMessage->state);
 80004ec:	9b02      	ldr	r3, [sp, #8]
 80004ee:	791a      	ldrb	r2, [r3, #4]
 80004f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <threadLed2+0x2c>)
 80004f6:	f001 fead 	bl	8002254 <HAL_GPIO_WritePin>
 80004fa:	e7ed      	b.n	80004d8 <threadLed2+0x4>
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	40020c00 	.word	0x40020c00

08000504 <threadLed1>:
{
 8000504:	b510      	push	{r4, lr}
 8000506:	b082      	sub	sp, #8
	uint8_t led1_state = 1;
 8000508:	2401      	movs	r4, #1
		Gpio_Toggle(GPIOD, 1 << 12);
 800050a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050e:	480a      	ldr	r0, [pc, #40]	; (8000538 <threadLed1+0x34>)
 8000510:	f001 fea6 	bl	8002260 <HAL_GPIO_TogglePin>
		led1_state ^= 1;
 8000514:	f084 0401 	eor.w	r4, r4, #1
		sMessage.String = "Hello World\r\n";
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <threadLed1+0x38>)
 800051a:	9300      	str	r3, [sp, #0]
		sMessage.state = led1_state;
 800051c:	f88d 4004 	strb.w	r4, [sp, #4]
		osMessagePut(myQueue01Handle,(void *)(&sMessage),100);
 8000520:	2264      	movs	r2, #100	; 0x64
 8000522:	4669      	mov	r1, sp
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <threadLed1+0x3c>)
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	f000 f978 	bl	800081c <osMessagePut>
		delay(1000);
 800052c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000530:	f000 f8cc 	bl	80006cc <delay>
	while(1)
 8000534:	e7e9      	b.n	800050a <threadLed1+0x6>
 8000536:	bf00      	nop
 8000538:	40020c00 	.word	0x40020c00
 800053c:	080029a4 	.word	0x080029a4
 8000540:	2000002c 	.word	0x2000002c

08000544 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_0)
 8000544:	2801      	cmp	r0, #1
 8000546:	d000      	beq.n	800054a <HAL_GPIO_EXTI_Callback+0x6>
 8000548:	4770      	bx	lr
{
 800054a:	b508      	push	{r3, lr}
		if(HAL_GetTick() - pTick > 300)
 800054c:	f001 fd04 	bl	8001f58 <HAL_GetTick>
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HAL_GPIO_EXTI_Callback+0x30>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	1ac0      	subs	r0, r0, r3
 8000556:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 800055a:	d800      	bhi.n	800055e <HAL_GPIO_EXTI_Callback+0x1a>
}
 800055c:	bd08      	pop	{r3, pc}
			pTick = HAL_GetTick();
 800055e:	f001 fcfb 	bl	8001f58 <HAL_GetTick>
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_GPIO_EXTI_Callback+0x30>)
 8000564:	6018      	str	r0, [r3, #0]
			Gpio_Toggle(GPIOD, 1 << 15);
 8000566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <HAL_GPIO_EXTI_Callback+0x34>)
 800056c:	f001 fe78 	bl	8002260 <HAL_GPIO_TogglePin>
}
 8000570:	e7f4      	b.n	800055c <HAL_GPIO_EXTI_Callback+0x18>
 8000572:	bf00      	nop
 8000574:	20000030 	.word	0x20000030
 8000578:	40020c00 	.word	0x40020c00

0800057c <appInit>:
{
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	b08d      	sub	sp, #52	; 0x34
	osMessageQDef(myQueue01, 16, sTaskMessage);
 8000580:	4c15      	ldr	r4, [pc, #84]	; (80005d8 <appInit+0x5c>)
 8000582:	ab0a      	add	r3, sp, #40	; 0x28
 8000584:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000588:	e883 0003 	stmia.w	r3, {r0, r1}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f93d 	bl	800080e <osMessageCreate>
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <appInit+0x60>)
 8000596:	6018      	str	r0, [r3, #0]
	osThreadDef(threadLed1, threadLed1, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
 8000598:	f10d 0e14 	add.w	lr, sp, #20
 800059c:	f104 0c08 	add.w	ip, r4, #8
 80005a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005a8:	f8dc 3000 	ldr.w	r3, [ip]
 80005ac:	f8ce 3000 	str.w	r3, [lr]
	if(osThreadCreate(osThread(threadLed1), NULL) != NULL)
 80005b0:	2100      	movs	r1, #0
 80005b2:	a805      	add	r0, sp, #20
 80005b4:	f000 f911 	bl	80007da <osThreadCreate>
 80005b8:	b160      	cbz	r0, 80005d4 <appInit+0x58>
	osThreadDef(threadLed2, threadLed2, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
 80005ba:	466c      	mov	r4, sp
 80005bc:	4d08      	ldr	r5, [pc, #32]	; (80005e0 <appInit+0x64>)
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	682b      	ldr	r3, [r5, #0]
 80005c4:	6023      	str	r3, [r4, #0]
	if(osThreadCreate(osThread(threadLed2), NULL) != NULL)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4668      	mov	r0, sp
 80005ca:	f000 f906 	bl	80007da <osThreadCreate>
 80005ce:	b110      	cbz	r0, 80005d6 <appInit+0x5a>
}
 80005d0:	b00d      	add	sp, #52	; 0x34
 80005d2:	bd30      	pop	{r4, r5, pc}
		while(1);
 80005d4:	e7fe      	b.n	80005d4 <appInit+0x58>
		while(1);
 80005d6:	e7fe      	b.n	80005d6 <appInit+0x5a>
 80005d8:	0800295c 	.word	0x0800295c
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	08002978 	.word	0x08002978

080005e4 <appMain>:
{
 80005e4:	b508      	push	{r3, lr}
	osKernelStart();
 80005e6:	f000 f8f3 	bl	80007d0 <osKernelStart>
	while(1)
 80005ea:	e7fe      	b.n	80005ea <appMain+0x6>

080005ec <SystemClock_Config>:
* Flash Latency(WS) = 5
* @param None
* @retval None
*/
static void SystemClock_Config(void)
{
 80005ec:	b510      	push	{r4, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2100      	movs	r1, #0
 80005f2:	9101      	str	r1, [sp, #4]
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SystemClock_Config+0x90>)
 80005f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005fc:	641a      	str	r2, [r3, #64]	; 0x40
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	9b01      	ldr	r3, [sp, #4]

	/* The voltage scaling allows optimizing the power consumption when the device is
	clocked below the maximum system frequency, to update the voltage scaling value
	regarding system frequency refer to product datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	9102      	str	r1, [sp, #8]
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <SystemClock_Config+0x94>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061a:	9302      	str	r3, [sp, #8]
 800061c:	9b02      	ldr	r3, [sp, #8]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061e:	2301      	movs	r3, #1
 8000620:	9303      	str	r3, [sp, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2402      	movs	r4, #2
 800062a:	9409      	str	r4, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000630:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000632:	2304      	movs	r3, #4
 8000634:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000636:	23a8      	movs	r3, #168	; 0xa8
 8000638:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800063c:	2307      	movs	r3, #7
 800063e:	930e      	str	r3, [sp, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	a803      	add	r0, sp, #12
 8000642:	f001 fe25 	bl	8002290 <HAL_RCC_OscConfig>
		//Error_Handler();
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000646:	230f      	movs	r3, #15
 8000648:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	9313      	str	r3, [sp, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000658:	2105      	movs	r1, #5
 800065a:	a80f      	add	r0, sp, #60	; 0x3c
 800065c:	f002 f87e 	bl	800275c <HAL_RCC_ClockConfig>
		/* Initialization Error */
		//Error_Handler();
	}

	/* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported */
	if (HAL_GetREVID() == 0x1001)
 8000660:	f001 fc94 	bl	8001f8c <HAL_GetREVID>
 8000664:	f241 0301 	movw	r3, #4097	; 0x1001
 8000668:	4298      	cmp	r0, r3
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x84>
	{
		/* Enable the Flash prefetch */
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
	}
}
 800066c:	b014      	add	sp, #80	; 0x50
 800066e:	bd10      	pop	{r4, pc}
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <SystemClock_Config+0x98>)
 8000672:	6813      	ldr	r3, [r2, #0]
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6013      	str	r3, [r2, #0]
}
 800067a:	e7f7      	b.n	800066c <SystemClock_Config+0x80>
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000
 8000684:	40023c00 	.word	0x40023c00

08000688 <bspInit>:
{
 8000688:	b500      	push	{lr}
 800068a:	b083      	sub	sp, #12
	HAL_Init();
 800068c:	f001 fc3e 	bl	8001f0c <HAL_Init>
	SystemClock_Config();
 8000690:	f7ff ffac 	bl	80005ec <SystemClock_Config>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000694:	2100      	movs	r1, #0
 8000696:	9100      	str	r1, [sp, #0]
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <bspInit+0x40>)
 800069a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069c:	f042 0208 	orr.w	r2, r2, #8
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
 80006a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a4:	f002 0208 	and.w	r2, r2, #8
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	9101      	str	r1, [sp, #4]
 80006ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b0:	f042 0201 	orr.w	r2, r2, #1
 80006b4:	631a      	str	r2, [r3, #48]	; 0x30
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	9b01      	ldr	r3, [sp, #4]
}
 80006c0:	b003      	add	sp, #12
 80006c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <delay>:
{
 80006cc:	b508      	push	{r3, lr}
	HAL_Delay(time_ms);
 80006ce:	f001 fc49 	bl	8001f64 <HAL_Delay>
}
 80006d2:	bd08      	pop	{r3, pc}

080006d4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80006d4:	4770      	bx	lr

080006d6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler>

080006d8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler>

080006da <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler>

080006dc <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler>

080006de <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80006e0:	b508      	push	{r3, lr}
  HAL_IncTick();
 80006e2:	f001 fc2d 	bl	8001f40 <HAL_IncTick>
  
  /* Call user callback */
  //HAL_SYSTICK_IRQHandler();
  osSystickHandler();
 80006e6:	f000 f910 	bl	800090a <osSystickHandler>
}
 80006ea:	bd08      	pop	{r3, pc}

080006ec <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */

void EXTI0_IRQHandler(void)
{
 80006ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f001 fdc0 	bl	8002274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006f4:	bd08      	pop	{r3, pc}
	...

080006f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f8:	4a03      	ldr	r2, [pc, #12]	; (8000708 <SystemInit+0x10>)
 80006fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80006fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000702:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800070c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000744 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000712:	490e      	ldr	r1, [pc, #56]	; (800074c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000714:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000728:	4c0b      	ldr	r4, [pc, #44]	; (8000758 <LoopFillZerobss+0x26>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000736:	f7ff ffdf 	bl	80006f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800073a:	f002 f8c9 	bl	80028d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073e:	f002 f8bd 	bl	80028bc <main>
  bx  lr    
 8000742:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000750:	080029dc 	.word	0x080029dc
  ldr r2, =_sbss
 8000754:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000758:	2000198c 	.word	0x2000198c

0800075c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC_IRQHandler>
	...

08000760 <GpioInit>:

/*
 * brief: GPIO Initialize function
 */
void GpioInit(void)
{
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;



#if GPIO_LED_EN
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2501      	movs	r5, #1
 8000766:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076a:	2302      	movs	r3, #2
 800076c:	9304      	str	r3, [sp, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800076e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000772:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000774:	a901      	add	r1, sp, #4
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <GpioInit+0x44>)
 8000778:	f001 fc7a 	bl	8002070 <HAL_GPIO_Init>
#endif

#if GPIO_BUTTON_EN
	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000780:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2400      	movs	r4, #0
 8000784:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000786:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	a901      	add	r1, sp, #4
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <GpioInit+0x48>)
 800078c:	f001 fc70 	bl	8002070 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000790:	4622      	mov	r2, r4
 8000792:	4621      	mov	r1, r4
 8000794:	2006      	movs	r0, #6
 8000796:	f001 fc11 	bl	8001fbc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079a:	2006      	movs	r0, #6
 800079c:	f001 fc46 	bl	800202c <HAL_NVIC_EnableIRQ>
#endif
}
 80007a0:	b007      	add	sp, #28
 80007a2:	bd30      	pop	{r4, r5, pc}
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40020000 	.word	0x40020000

080007ac <hwInit>:

/*
 * brief: hardware Initialize function
 */
void hwInit(void)
{
 80007ac:	b508      	push	{r3, lr}
	bspInit();
 80007ae:	f7ff ff6b 	bl	8000688 <bspInit>

	GpioInit();
 80007b2:	f7ff ffd5 	bl	8000760 <GpioInit>
}
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80007b8:	2884      	cmp	r0, #132	; 0x84
 80007ba:	d001      	beq.n	80007c0 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80007bc:	3003      	adds	r0, #3
 80007be:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80007c0:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80007c2:	4770      	bx	lr

080007c4 <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80007c4:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80007c8:	3800      	subs	r0, #0
 80007ca:	bf18      	it	ne
 80007cc:	2001      	movne	r0, #1
 80007ce:	4770      	bx	lr

080007d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80007d0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80007d2:	f000 fddf 	bl	8001394 <vTaskStartScheduler>
  
  return osOK;
}
 80007d6:	2000      	movs	r0, #0
 80007d8:	bd08      	pop	{r3, pc}

080007da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80007da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007dc:	b085      	sub	sp, #20
 80007de:	460c      	mov	r4, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80007e0:	6845      	ldr	r5, [r0, #4]
 80007e2:	6806      	ldr	r6, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80007e4:	6907      	ldr	r7, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80007e6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80007ea:	f7ff ffe5 	bl	80007b8 <makeFreeRtosPriority>
 80007ee:	ab03      	add	r3, sp, #12
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	9000      	str	r0, [sp, #0]
 80007f4:	4623      	mov	r3, r4
 80007f6:	b2ba      	uxth	r2, r7
 80007f8:	4631      	mov	r1, r6
 80007fa:	4628      	mov	r0, r5
 80007fc:	f000 fd98 	bl	8001330 <xTaskCreate>
 8000800:	2801      	cmp	r0, #1
 8000802:	d102      	bne.n	800080a <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000804:	9803      	ldr	r0, [sp, #12]
}
 8000806:	b005      	add	sp, #20
 8000808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800080a:	2000      	movs	r0, #0
 800080c:	e7fb      	b.n	8000806 <osThreadCreate+0x2c>

0800080e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800080e:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8000810:	2200      	movs	r2, #0
 8000812:	6841      	ldr	r1, [r0, #4]
 8000814:	6800      	ldr	r0, [r0, #0]
 8000816:	f000 f9b9 	bl	8000b8c <xQueueGenericCreate>
#endif
}
 800081a:	bd08      	pop	{r3, pc}

0800081c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800081c:	b530      	push	{r4, r5, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	4604      	mov	r4, r0
 8000822:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8000824:	2300      	movs	r3, #0
 8000826:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8000828:	4615      	mov	r5, r2
 800082a:	b902      	cbnz	r2, 800082e <osMessagePut+0x12>
    ticks = 1;
 800082c:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 800082e:	f7ff ffc9 	bl	80007c4 <inHandlerMode>
 8000832:	b1a8      	cbz	r0, 8000860 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8000834:	2300      	movs	r3, #0
 8000836:	aa03      	add	r2, sp, #12
 8000838:	a901      	add	r1, sp, #4
 800083a:	4620      	mov	r0, r4
 800083c:	f000 fa8b 	bl	8000d56 <xQueueGenericSendFromISR>
 8000840:	2801      	cmp	r0, #1
 8000842:	d118      	bne.n	8000876 <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8000844:	9b03      	ldr	r3, [sp, #12]
 8000846:	b1c3      	cbz	r3, 800087a <osMessagePut+0x5e>
 8000848:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800084c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000850:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000854:	f3bf 8f4f 	dsb	sy
 8000858:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800085c:	2000      	movs	r0, #0
 800085e:	e008      	b.n	8000872 <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8000860:	2300      	movs	r3, #0
 8000862:	462a      	mov	r2, r5
 8000864:	a901      	add	r1, sp, #4
 8000866:	4620      	mov	r0, r4
 8000868:	f000 f9b1 	bl	8000bce <xQueueGenericSend>
 800086c:	2801      	cmp	r0, #1
 800086e:	d106      	bne.n	800087e <osMessagePut+0x62>
  return osOK;
 8000870:	2000      	movs	r0, #0
}
 8000872:	b005      	add	sp, #20
 8000874:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8000876:	20ff      	movs	r0, #255	; 0xff
 8000878:	e7fb      	b.n	8000872 <osMessagePut+0x56>
  return osOK;
 800087a:	2000      	movs	r0, #0
 800087c:	e7f9      	b.n	8000872 <osMessagePut+0x56>
      return osErrorOS;
 800087e:	20ff      	movs	r0, #255	; 0xff
 8000880:	e7f7      	b.n	8000872 <osMessagePut+0x56>

08000882 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8000882:	b570      	push	{r4, r5, r6, lr}
 8000884:	b084      	sub	sp, #16
 8000886:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8000888:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 800088e:	b1e1      	cbz	r1, 80008ca <osMessageGet+0x48>
 8000890:	460d      	mov	r5, r1
 8000892:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8000894:	2300      	movs	r3, #0
 8000896:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8000898:	f7ff ff94 	bl	80007c4 <inHandlerMode>
 800089c:	b300      	cbz	r0, 80008e0 <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800089e:	aa03      	add	r2, sp, #12
 80008a0:	a901      	add	r1, sp, #4
 80008a2:	4628      	mov	r0, r5
 80008a4:	f000 fb6d 	bl	8000f82 <xQueueReceiveFromISR>
 80008a8:	2801      	cmp	r0, #1
 80008aa:	d016      	beq.n	80008da <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80008b0:	9b03      	ldr	r3, [sp, #12]
 80008b2:	b1fb      	cbz	r3, 80008f4 <osMessageGet+0x72>
 80008b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80008b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80008c0:	f3bf 8f4f 	dsb	sy
 80008c4:	f3bf 8f6f 	isb	sy
 80008c8:	e014      	b.n	80008f4 <osMessageGet+0x72>
    event.status = osErrorParameter;
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	9300      	str	r3, [sp, #0]
    return event;
 80008ce:	466b      	mov	r3, sp
 80008d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80008d8:	e011      	b.n	80008fe <osMessageGet+0x7c>
      event.status = osEventMessage;
 80008da:	2310      	movs	r3, #16
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	e7e7      	b.n	80008b0 <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80008e0:	4632      	mov	r2, r6
 80008e2:	a901      	add	r1, sp, #4
 80008e4:	4628      	mov	r0, r5
 80008e6:	f000 fa9d 	bl	8000e24 <xQueueReceive>
 80008ea:	2801      	cmp	r0, #1
 80008ec:	d00a      	beq.n	8000904 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80008ee:	b106      	cbz	r6, 80008f2 <osMessageGet+0x70>
 80008f0:	2640      	movs	r6, #64	; 0x40
 80008f2:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 80008f4:	466b      	mov	r3, sp
 80008f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80008fe:	4620      	mov	r0, r4
 8000900:	b004      	add	sp, #16
 8000902:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8000904:	2310      	movs	r3, #16
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	e7f4      	b.n	80008f4 <osMessageGet+0x72>

0800090a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800090a:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800090c:	f000 ff8e 	bl	800182c <xTaskGetSchedulerState>
 8000910:	2801      	cmp	r0, #1
 8000912:	d100      	bne.n	8000916 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000914:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000916:	f001 f8cd 	bl	8001ab4 <xPortSysTickHandler>
}
 800091a:	e7fb      	b.n	8000914 <osSystickHandler+0xa>

0800091c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800091c:	f100 0308 	add.w	r3, r0, #8
 8000920:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000926:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000928:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800092a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800092c:	2300      	movs	r3, #0
 800092e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000930:	4770      	bx	lr

08000932 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000932:	2300      	movs	r3, #0
 8000934:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000936:	4770      	bx	lr

08000938 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000938:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800093a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000940:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000942:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000944:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000946:	6803      	ldr	r3, [r0, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	6003      	str	r3, [r0, #0]
}
 800094c:	4770      	bx	lr

0800094e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800094e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000950:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000952:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000956:	d011      	beq.n	800097c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000958:	f100 0308 	add.w	r3, r0, #8
 800095c:	461c      	mov	r4, r3
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	42aa      	cmp	r2, r5
 8000964:	d9fa      	bls.n	800095c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000966:	6863      	ldr	r3, [r4, #4]
 8000968:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800096a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800096c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800096e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000970:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000972:	6803      	ldr	r3, [r0, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	6003      	str	r3, [r0, #0]
}
 8000978:	bc30      	pop	{r4, r5}
 800097a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800097c:	6904      	ldr	r4, [r0, #16]
 800097e:	e7f2      	b.n	8000966 <vListInsert+0x18>

08000980 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000980:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000982:	6841      	ldr	r1, [r0, #4]
 8000984:	6882      	ldr	r2, [r0, #8]
 8000986:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000988:	6841      	ldr	r1, [r0, #4]
 800098a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	4282      	cmp	r2, r0
 8000990:	d006      	beq.n	80009a0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000992:	2200      	movs	r2, #0
 8000994:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	3a01      	subs	r2, #1
 800099a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800099c:	6818      	ldr	r0, [r3, #0]
}
 800099e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80009a0:	6882      	ldr	r2, [r0, #8]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	e7f5      	b.n	8000992 <uxListRemove+0x12>

080009a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80009a6:	b510      	push	{r4, lr}
 80009a8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80009aa:	f001 f813 	bl	80019d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80009ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d004      	beq.n	80009c0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80009b6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80009b8:	f001 f82e 	bl	8001a18 <vPortExitCritical>

	return xReturn;
}
 80009bc:	4620      	mov	r0, r4
 80009be:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80009c0:	2401      	movs	r4, #1
 80009c2:	e7f9      	b.n	80009b8 <prvIsQueueFull+0x12>

080009c4 <prvIsQueueEmpty>:
{
 80009c4:	b510      	push	{r4, lr}
 80009c6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80009c8:	f001 f804 	bl	80019d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80009cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009ce:	b923      	cbnz	r3, 80009da <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80009d0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80009d2:	f001 f821 	bl	8001a18 <vPortExitCritical>
}
 80009d6:	4620      	mov	r0, r4
 80009d8:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80009da:	2400      	movs	r4, #0
 80009dc:	e7f9      	b.n	80009d2 <prvIsQueueEmpty+0xe>

080009de <prvCopyDataToQueue>:
{
 80009de:	b570      	push	{r4, r5, r6, lr}
 80009e0:	4604      	mov	r4, r0
 80009e2:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009e4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80009e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80009e8:	b95a      	cbnz	r2, 8000a02 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80009ea:	6803      	ldr	r3, [r0, #0]
 80009ec:	b11b      	cbz	r3, 80009f6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80009ee:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80009f0:	3601      	adds	r6, #1
 80009f2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80009f4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80009f6:	6880      	ldr	r0, [r0, #8]
 80009f8:	f000 ff28 	bl	800184c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60a3      	str	r3, [r4, #8]
 8000a00:	e7f6      	b.n	80009f0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8000a02:	b96d      	cbnz	r5, 8000a20 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a04:	6840      	ldr	r0, [r0, #4]
 8000a06:	f001 ff87 	bl	8002918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a0c:	6863      	ldr	r3, [r4, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000a12:	68a2      	ldr	r2, [r4, #8]
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d319      	bcc.n	8000a4c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	e7e7      	b.n	80009f0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000a20:	68c0      	ldr	r0, [r0, #12]
 8000a22:	f001 ff79 	bl	8002918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000a26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a28:	4251      	negs	r1, r2
 8000a2a:	68e3      	ldr	r3, [r4, #12]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000a30:	6822      	ldr	r2, [r4, #0]
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d202      	bcs.n	8000a3c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000a36:	68a3      	ldr	r3, [r4, #8]
 8000a38:	440b      	add	r3, r1
 8000a3a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8000a3c:	2d02      	cmp	r5, #2
 8000a3e:	d001      	beq.n	8000a44 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8000a40:	2000      	movs	r0, #0
 8000a42:	e7d5      	b.n	80009f0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a44:	b126      	cbz	r6, 8000a50 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8000a46:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7d1      	b.n	80009f0 <prvCopyDataToQueue+0x12>
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e7cf      	b.n	80009f0 <prvCopyDataToQueue+0x12>
 8000a50:	2000      	movs	r0, #0
 8000a52:	e7cd      	b.n	80009f0 <prvCopyDataToQueue+0x12>

08000a54 <prvCopyDataFromQueue>:
{
 8000a54:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a56:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000a58:	b16a      	cbz	r2, 8000a76 <prvCopyDataFromQueue+0x22>
{
 8000a5a:	b510      	push	{r4, lr}
 8000a5c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a5e:	68d9      	ldr	r1, [r3, #12]
 8000a60:	4411      	add	r1, r2
 8000a62:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a64:	689c      	ldr	r4, [r3, #8]
 8000a66:	42a1      	cmp	r1, r4
 8000a68:	d301      	bcc.n	8000a6e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000a6a:	6819      	ldr	r1, [r3, #0]
 8000a6c:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a6e:	68d9      	ldr	r1, [r3, #12]
 8000a70:	f001 ff52 	bl	8002918 <memcpy>
}
 8000a74:	bd10      	pop	{r4, pc}
 8000a76:	4770      	bx	lr

08000a78 <prvUnlockQueue>:
{
 8000a78:	b538      	push	{r3, r4, r5, lr}
 8000a7a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8000a7c:	f000 ffaa 	bl	80019d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8000a80:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8000a84:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a86:	e001      	b.n	8000a8c <prvUnlockQueue+0x14>
			--cTxLock;
 8000a88:	3c01      	subs	r4, #1
 8000a8a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	dd0a      	ble.n	8000aa6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a92:	b143      	cbz	r3, 8000aa6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a94:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8000a98:	f000 fe2e 	bl	80016f8 <xTaskRemoveFromEventList>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d0f3      	beq.n	8000a88 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8000aa0:	f000 febe 	bl	8001820 <vTaskMissedYield>
 8000aa4:	e7f0      	b.n	8000a88 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8000aa6:	23ff      	movs	r3, #255	; 0xff
 8000aa8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8000aac:	f000 ffb4 	bl	8001a18 <vPortExitCritical>
	taskENTER_CRITICAL();
 8000ab0:	f000 ff90 	bl	80019d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8000ab4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8000ab8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000aba:	e001      	b.n	8000ac0 <prvUnlockQueue+0x48>
				--cRxLock;
 8000abc:	3c01      	subs	r4, #1
 8000abe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	dd0a      	ble.n	8000ada <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ac4:	692b      	ldr	r3, [r5, #16]
 8000ac6:	b143      	cbz	r3, 8000ada <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ac8:	f105 0010 	add.w	r0, r5, #16
 8000acc:	f000 fe14 	bl	80016f8 <xTaskRemoveFromEventList>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d0f3      	beq.n	8000abc <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8000ad4:	f000 fea4 	bl	8001820 <vTaskMissedYield>
 8000ad8:	e7f0      	b.n	8000abc <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8000ada:	23ff      	movs	r3, #255	; 0xff
 8000adc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8000ae0:	f000 ff9a 	bl	8001a18 <vPortExitCritical>
}
 8000ae4:	bd38      	pop	{r3, r4, r5, pc}

08000ae6 <xQueueGenericReset>:
{
 8000ae6:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8000ae8:	b1e0      	cbz	r0, 8000b24 <xQueueGenericReset+0x3e>
 8000aea:	460d      	mov	r5, r1
 8000aec:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8000aee:	f000 ff71 	bl	80019d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000af6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000af8:	fb01 3002 	mla	r0, r1, r2, r3
 8000afc:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000afe:	2000      	movs	r0, #0
 8000b00:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b02:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b04:	3a01      	subs	r2, #1
 8000b06:	fb02 3301 	mla	r3, r2, r1, r3
 8000b0a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b0c:	23ff      	movs	r3, #255	; 0xff
 8000b0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8000b16:	b9fd      	cbnz	r5, 8000b58 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b18:	6923      	ldr	r3, [r4, #16]
 8000b1a:	b963      	cbnz	r3, 8000b36 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8000b1c:	f000 ff7c 	bl	8001a18 <vPortExitCritical>
}
 8000b20:	2001      	movs	r0, #1
 8000b22:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8000b34:	e7fe      	b.n	8000b34 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b36:	f104 0010 	add.w	r0, r4, #16
 8000b3a:	f000 fddd 	bl	80016f8 <xTaskRemoveFromEventList>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d0ec      	beq.n	8000b1c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8000b42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000b4e:	f3bf 8f4f 	dsb	sy
 8000b52:	f3bf 8f6f 	isb	sy
 8000b56:	e7e1      	b.n	8000b1c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b58:	f104 0010 	add.w	r0, r4, #16
 8000b5c:	f7ff fede 	bl	800091c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000b64:	f7ff feda 	bl	800091c <vListInitialise>
 8000b68:	e7d8      	b.n	8000b1c <xQueueGenericReset+0x36>

08000b6a <prvInitialiseNewQueue>:
{
 8000b6a:	b538      	push	{r3, r4, r5, lr}
 8000b6c:	461d      	mov	r5, r3
 8000b6e:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8000b70:	460b      	mov	r3, r1
 8000b72:	b949      	cbnz	r1, 8000b88 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000b74:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8000b76:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000b78:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f7ff ffb2 	bl	8000ae6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8000b82:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8000b86:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000b88:	6022      	str	r2, [r4, #0]
 8000b8a:	e7f4      	b.n	8000b76 <prvInitialiseNewQueue+0xc>

08000b8c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000b8c:	b940      	cbnz	r0, 8000ba0 <xQueueGenericCreate+0x14>
 8000b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	e7fe      	b.n	8000b9e <xQueueGenericCreate+0x12>
	{
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	460c      	mov	r4, r1
 8000ba6:	4615      	mov	r5, r2
 8000ba8:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000baa:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000bae:	3050      	adds	r0, #80	; 0x50
 8000bb0:	f001 f8c8 	bl	8001d44 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8000bb4:	4607      	mov	r7, r0
 8000bb6:	b138      	cbz	r0, 8000bc8 <xQueueGenericCreate+0x3c>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000bb8:	9000      	str	r0, [sp, #0]
 8000bba:	462b      	mov	r3, r5
 8000bbc:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f7ff ffd1 	bl	8000b6a <prvInitialiseNewQueue>
	}
 8000bc8:	4638      	mov	r0, r7
 8000bca:	b003      	add	sp, #12
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bce <xQueueGenericSend>:
{
 8000bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8000bd4:	b188      	cbz	r0, 8000bfa <xQueueGenericSend+0x2c>
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	461d      	mov	r5, r3
 8000bda:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bdc:	b1b1      	cbz	r1, 8000c0c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000bde:	2d02      	cmp	r5, #2
 8000be0:	d120      	bne.n	8000c24 <xQueueGenericSend+0x56>
 8000be2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d01d      	beq.n	8000c24 <xQueueGenericSend+0x56>
 8000be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bec:	f383 8811 	msr	BASEPRI, r3
 8000bf0:	f3bf 8f6f 	isb	sy
 8000bf4:	f3bf 8f4f 	dsb	sy
 8000bf8:	e7fe      	b.n	8000bf8 <xQueueGenericSend+0x2a>
 8000bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfe:	f383 8811 	msr	BASEPRI, r3
 8000c02:	f3bf 8f6f 	isb	sy
 8000c06:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8000c0a:	e7fe      	b.n	8000c0a <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0e5      	beq.n	8000bde <xQueueGenericSend+0x10>
 8000c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c16:	f383 8811 	msr	BASEPRI, r3
 8000c1a:	f3bf 8f6f 	isb	sy
 8000c1e:	f3bf 8f4f 	dsb	sy
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c24:	f000 fe02 	bl	800182c <xTaskGetSchedulerState>
 8000c28:	4606      	mov	r6, r0
 8000c2a:	b958      	cbnz	r0, 8000c44 <xQueueGenericSend+0x76>
 8000c2c:	9b01      	ldr	r3, [sp, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d048      	beq.n	8000cc4 <xQueueGenericSend+0xf6>
 8000c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c36:	f383 8811 	msr	BASEPRI, r3
 8000c3a:	f3bf 8f6f 	isb	sy
 8000c3e:	f3bf 8f4f 	dsb	sy
 8000c42:	e7fe      	b.n	8000c42 <xQueueGenericSend+0x74>
 8000c44:	2600      	movs	r6, #0
 8000c46:	e03d      	b.n	8000cc4 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c48:	462a      	mov	r2, r5
 8000c4a:	4639      	mov	r1, r7
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f7ff fec6 	bl	80009de <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c54:	b97b      	cbnz	r3, 8000c76 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8000c56:	b148      	cbz	r0, 8000c6c <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8000c58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c60:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000c64:	f3bf 8f4f 	dsb	sy
 8000c68:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8000c6c:	f000 fed4 	bl	8001a18 <vPortExitCritical>
				return pdPASS;
 8000c70:	2001      	movs	r0, #1
}
 8000c72:	b005      	add	sp, #20
 8000c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000c7a:	f000 fd3d 	bl	80016f8 <xTaskRemoveFromEventList>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d0f4      	beq.n	8000c6c <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8000c82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000c8e:	f3bf 8f4f 	dsb	sy
 8000c92:	f3bf 8f6f 	isb	sy
 8000c96:	e7e9      	b.n	8000c6c <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8000c98:	f000 febe 	bl	8001a18 <vPortExitCritical>
					return errQUEUE_FULL;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e7e8      	b.n	8000c72 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000ca0:	a802      	add	r0, sp, #8
 8000ca2:	f000 fd6f 	bl	8001784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	e019      	b.n	8000cde <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8000caa:	2300      	movs	r3, #0
 8000cac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000cb0:	e021      	b.n	8000cf6 <xQueueGenericSend+0x128>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000cb8:	e023      	b.n	8000d02 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f7ff fedc 	bl	8000a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000cc0:	f000 fc3a 	bl	8001538 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8000cc4:	f000 fe86 	bl	80019d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000cc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000cca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d3bb      	bcc.n	8000c48 <xQueueGenericSend+0x7a>
 8000cd0:	2d02      	cmp	r5, #2
 8000cd2:	d0b9      	beq.n	8000c48 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000cd4:	9b01      	ldr	r3, [sp, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0de      	beq.n	8000c98 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8000cde:	f000 fe9b 	bl	8001a18 <vPortExitCritical>
		vTaskSuspendAll();
 8000ce2:	f000 fb95 	bl	8001410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ce6:	f000 fe75 	bl	80019d4 <vPortEnterCritical>
 8000cea:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8000cee:	b252      	sxtb	r2, r2
 8000cf0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8000cf4:	d0d9      	beq.n	8000caa <xQueueGenericSend+0xdc>
 8000cf6:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8000cfa:	b252      	sxtb	r2, r2
 8000cfc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8000d00:	d0d7      	beq.n	8000cb2 <xQueueGenericSend+0xe4>
 8000d02:	f000 fe89 	bl	8001a18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d06:	a901      	add	r1, sp, #4
 8000d08:	a802      	add	r0, sp, #8
 8000d0a:	f000 fd47 	bl	800179c <xTaskCheckForTimeOut>
 8000d0e:	b9d8      	cbnz	r0, 8000d48 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000d10:	4620      	mov	r0, r4
 8000d12:	f7ff fe48 	bl	80009a6 <prvIsQueueFull>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d0cf      	beq.n	8000cba <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000d1a:	9901      	ldr	r1, [sp, #4]
 8000d1c:	f104 0010 	add.w	r0, r4, #16
 8000d20:	f000 fcd2 	bl	80016c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000d24:	4620      	mov	r0, r4
 8000d26:	f7ff fea7 	bl	8000a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000d2a:	f000 fc05 	bl	8001538 <xTaskResumeAll>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d1c8      	bne.n	8000cc4 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8000d32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000d3e:	f3bf 8f4f 	dsb	sy
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	e7bd      	b.n	8000cc4 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f7ff fe95 	bl	8000a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000d4e:	f000 fbf3 	bl	8001538 <xTaskResumeAll>
			return errQUEUE_FULL;
 8000d52:	2000      	movs	r0, #0
 8000d54:	e78d      	b.n	8000c72 <xQueueGenericSend+0xa4>

08000d56 <xQueueGenericSendFromISR>:
{
 8000d56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8000d5a:	b190      	cbz	r0, 8000d82 <xQueueGenericSendFromISR+0x2c>
 8000d5c:	460f      	mov	r7, r1
 8000d5e:	4616      	mov	r6, r2
 8000d60:	461c      	mov	r4, r3
 8000d62:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d64:	b1b1      	cbz	r1, 8000d94 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d66:	2c02      	cmp	r4, #2
 8000d68:	d120      	bne.n	8000dac <xQueueGenericSendFromISR+0x56>
 8000d6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d01d      	beq.n	8000dac <xQueueGenericSendFromISR+0x56>
 8000d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d74:	f383 8811 	msr	BASEPRI, r3
 8000d78:	f3bf 8f6f 	isb	sy
 8000d7c:	f3bf 8f4f 	dsb	sy
 8000d80:	e7fe      	b.n	8000d80 <xQueueGenericSendFromISR+0x2a>
 8000d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d86:	f383 8811 	msr	BASEPRI, r3
 8000d8a:	f3bf 8f6f 	isb	sy
 8000d8e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8000d92:	e7fe      	b.n	8000d92 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d94:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0e5      	beq.n	8000d66 <xQueueGenericSendFromISR+0x10>
 8000d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9e:	f383 8811 	msr	BASEPRI, r3
 8000da2:	f3bf 8f6f 	isb	sy
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	e7fe      	b.n	8000daa <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000dac:	f000 ff38 	bl	8001c20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000db0:	f3ef 8911 	mrs	r9, BASEPRI
 8000db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db8:	f383 8811 	msr	BASEPRI, r3
 8000dbc:	f3bf 8f6f 	isb	sy
 8000dc0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000dc4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000dc6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d306      	bcc.n	8000dda <xQueueGenericSendFromISR+0x84>
 8000dcc:	2c02      	cmp	r4, #2
 8000dce:	d004      	beq.n	8000dda <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8000dd0:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000dd2:	f389 8811 	msr	BASEPRI, r9
}
 8000dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8000dda:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8000dde:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000de2:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000de4:	4622      	mov	r2, r4
 8000de6:	4639      	mov	r1, r7
 8000de8:	4628      	mov	r0, r5
 8000dea:	f7ff fdf8 	bl	80009de <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8000dee:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8000df2:	d006      	beq.n	8000e02 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000df4:	f108 0301 	add.w	r3, r8, #1
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8000dfe:	2001      	movs	r0, #1
 8000e00:	e7e7      	b.n	8000dd2 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e04:	b90b      	cbnz	r3, 8000e0a <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8000e06:	2001      	movs	r0, #1
 8000e08:	e7e3      	b.n	8000dd2 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e0a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8000e0e:	f000 fc73 	bl	80016f8 <xTaskRemoveFromEventList>
 8000e12:	b118      	cbz	r0, 8000e1c <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8000e14:	b126      	cbz	r6, 8000e20 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000e16:	2001      	movs	r0, #1
 8000e18:	6030      	str	r0, [r6, #0]
 8000e1a:	e7da      	b.n	8000dd2 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	e7d8      	b.n	8000dd2 <xQueueGenericSendFromISR+0x7c>
 8000e20:	2001      	movs	r0, #1
 8000e22:	e7d6      	b.n	8000dd2 <xQueueGenericSendFromISR+0x7c>

08000e24 <xQueueReceive>:
{
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8000e2a:	b190      	cbz	r0, 8000e52 <xQueueReceive+0x2e>
 8000e2c:	460f      	mov	r7, r1
 8000e2e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e30:	b1c1      	cbz	r1, 8000e64 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e32:	f000 fcfb 	bl	800182c <xTaskGetSchedulerState>
 8000e36:	4606      	mov	r6, r0
 8000e38:	bb00      	cbnz	r0, 8000e7c <xQueueReceive+0x58>
 8000e3a:	9b01      	ldr	r3, [sp, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d05e      	beq.n	8000efe <xQueueReceive+0xda>
	__asm volatile
 8000e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e44:	f383 8811 	msr	BASEPRI, r3
 8000e48:	f3bf 8f6f 	isb	sy
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	e7fe      	b.n	8000e50 <xQueueReceive+0x2c>
 8000e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e56:	f383 8811 	msr	BASEPRI, r3
 8000e5a:	f3bf 8f6f 	isb	sy
 8000e5e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8000e62:	e7fe      	b.n	8000e62 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e64:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0e3      	beq.n	8000e32 <xQueueReceive+0xe>
 8000e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6e:	f383 8811 	msr	BASEPRI, r3
 8000e72:	f3bf 8f6f 	isb	sy
 8000e76:	f3bf 8f4f 	dsb	sy
 8000e7a:	e7fe      	b.n	8000e7a <xQueueReceive+0x56>
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	e03e      	b.n	8000efe <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e80:	4639      	mov	r1, r7
 8000e82:	4620      	mov	r0, r4
 8000e84:	f7ff fde6 	bl	8000a54 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e88:	3d01      	subs	r5, #1
 8000e8a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e8c:	6923      	ldr	r3, [r4, #16]
 8000e8e:	b923      	cbnz	r3, 8000e9a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8000e90:	f000 fdc2 	bl	8001a18 <vPortExitCritical>
				return pdPASS;
 8000e94:	2001      	movs	r0, #1
}
 8000e96:	b005      	add	sp, #20
 8000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e9a:	f104 0010 	add.w	r0, r4, #16
 8000e9e:	f000 fc2b 	bl	80016f8 <xTaskRemoveFromEventList>
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	d0f4      	beq.n	8000e90 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8000ea6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000eb2:	f3bf 8f4f 	dsb	sy
 8000eb6:	f3bf 8f6f 	isb	sy
 8000eba:	e7e9      	b.n	8000e90 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8000ebc:	f000 fdac 	bl	8001a18 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	e7e8      	b.n	8000e96 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000ec4:	a802      	add	r0, sp, #8
 8000ec6:	f000 fc5d 	bl	8001784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000eca:	2601      	movs	r6, #1
 8000ecc:	e021      	b.n	8000f12 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000ed4:	e029      	b.n	8000f2a <xQueueReceive+0x106>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000edc:	e02b      	b.n	8000f36 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff fdca 	bl	8000a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000ee4:	f000 fb28 	bl	8001538 <xTaskResumeAll>
 8000ee8:	e009      	b.n	8000efe <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff fdc4 	bl	8000a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ef0:	f000 fb22 	bl	8001538 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff fd65 	bl	80009c4 <prvIsQueueEmpty>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d13f      	bne.n	8000f7e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8000efe:	f000 fd69 	bl	80019d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f02:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	d1bb      	bne.n	8000e80 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000f08:	9b01      	ldr	r3, [sp, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0d6      	beq.n	8000ebc <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d0d8      	beq.n	8000ec4 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8000f12:	f000 fd81 	bl	8001a18 <vPortExitCritical>
		vTaskSuspendAll();
 8000f16:	f000 fa7b 	bl	8001410 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000f1a:	f000 fd5b 	bl	80019d4 <vPortEnterCritical>
 8000f1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f28:	d0d1      	beq.n	8000ece <xQueueReceive+0xaa>
 8000f2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f34:	d0cf      	beq.n	8000ed6 <xQueueReceive+0xb2>
 8000f36:	f000 fd6f 	bl	8001a18 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f3a:	a901      	add	r1, sp, #4
 8000f3c:	a802      	add	r0, sp, #8
 8000f3e:	f000 fc2d 	bl	800179c <xTaskCheckForTimeOut>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d1d1      	bne.n	8000eea <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff fd3c 	bl	80009c4 <prvIsQueueEmpty>
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d0c6      	beq.n	8000ede <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f50:	9901      	ldr	r1, [sp, #4]
 8000f52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000f56:	f000 fbb7 	bl	80016c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f7ff fd8c 	bl	8000a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f60:	f000 faea 	bl	8001538 <xTaskResumeAll>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1ca      	bne.n	8000efe <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8000f68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000f74:	f3bf 8f4f 	dsb	sy
 8000f78:	f3bf 8f6f 	isb	sy
 8000f7c:	e7bf      	b.n	8000efe <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8000f7e:	2000      	movs	r0, #0
 8000f80:	e789      	b.n	8000e96 <xQueueReceive+0x72>

08000f82 <xQueueReceiveFromISR>:
{
 8000f82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8000f86:	b1b0      	cbz	r0, 8000fb6 <xQueueReceiveFromISR+0x34>
 8000f88:	460d      	mov	r5, r1
 8000f8a:	4616      	mov	r6, r2
 8000f8c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f8e:	b1d9      	cbz	r1, 8000fc8 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f90:	f000 fe46 	bl	8001c20 <vPortValidateInterruptPriority>
	__asm volatile
 8000f94:	f3ef 8811 	mrs	r8, BASEPRI
 8000f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f9c:	f383 8811 	msr	BASEPRI, r3
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000fa8:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000faa:	b9cf      	cbnz	r7, 8000fe0 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8000fac:	2000      	movs	r0, #0
	__asm volatile
 8000fae:	f388 8811 	msr	BASEPRI, r8
}
 8000fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8000fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fba:	f383 8811 	msr	BASEPRI, r3
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8000fc6:	e7fe      	b.n	8000fc6 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0e0      	beq.n	8000f90 <xQueueReceiveFromISR+0xe>
 8000fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd2:	f383 8811 	msr	BASEPRI, r3
 8000fd6:	f3bf 8f6f 	isb	sy
 8000fda:	f3bf 8f4f 	dsb	sy
 8000fde:	e7fe      	b.n	8000fde <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8000fe0:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8000fe4:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000fe8:	4629      	mov	r1, r5
 8000fea:	4620      	mov	r0, r4
 8000fec:	f7ff fd32 	bl	8000a54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000ff0:	3f01      	subs	r7, #1
 8000ff2:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8000ff4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8000ff8:	d006      	beq.n	8001008 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8000ffa:	f109 0301 	add.w	r3, r9, #1
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8001004:	2001      	movs	r0, #1
 8001006:	e7d2      	b.n	8000fae <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001008:	6923      	ldr	r3, [r4, #16]
 800100a:	b90b      	cbnz	r3, 8001010 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800100c:	2001      	movs	r0, #1
 800100e:	e7ce      	b.n	8000fae <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001010:	f104 0010 	add.w	r0, r4, #16
 8001014:	f000 fb70 	bl	80016f8 <xTaskRemoveFromEventList>
 8001018:	b118      	cbz	r0, 8001022 <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800101a:	b126      	cbz	r6, 8001026 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800101c:	2001      	movs	r0, #1
 800101e:	6030      	str	r0, [r6, #0]
 8001020:	e7c5      	b.n	8000fae <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8001022:	2001      	movs	r0, #1
 8001024:	e7c3      	b.n	8000fae <xQueueReceiveFromISR+0x2c>
 8001026:	2001      	movs	r0, #1
 8001028:	e7c1      	b.n	8000fae <xQueueReceiveFromISR+0x2c>
	...

0800102c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <prvResetNextTaskUnblockTime+0x24>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b923      	cbnz	r3, 800103e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <prvResetNextTaskUnblockTime+0x28>)
 8001036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <prvResetNextTaskUnblockTime+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <prvResetNextTaskUnblockTime+0x28>)
 800104a:	601a      	str	r2, [r3, #0]
	}
}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000038 	.word	0x20000038
 8001054:	2000010c 	.word	0x2000010c

08001058 <prvDeleteTCB>:
	{
 8001058:	b510      	push	{r4, lr}
 800105a:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 800105c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800105e:	f000 feef 	bl	8001e40 <vPortFree>
			vPortFree( pxTCB );
 8001062:	4620      	mov	r0, r4
 8001064:	f000 feec 	bl	8001e40 <vPortFree>
	}
 8001068:	bd10      	pop	{r4, pc}

0800106a <prvInitialiseNewTask>:
{
 800106a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800106e:	4680      	mov	r8, r0
 8001070:	460d      	mov	r5, r1
 8001072:	4617      	mov	r7, r2
 8001074:	4699      	mov	r9, r3
 8001076:	9e08      	ldr	r6, [sp, #32]
 8001078:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800107c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	21a5      	movs	r1, #165	; 0xa5
 8001082:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001084:	f001 fc56 	bl	8002934 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001088:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800108a:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800108e:	3a01      	subs	r2, #1
 8001090:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001094:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8001098:	b3b5      	cbz	r5, 8001108 <prvInitialiseNewTask+0x9e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800109a:	f04f 0c00 	mov.w	ip, #0
 800109e:	f1bc 0f0f 	cmp.w	ip, #15
 80010a2:	d80b      	bhi.n	80010bc <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80010a4:	f815 200c 	ldrb.w	r2, [r5, ip]
 80010a8:	eb04 030c 	add.w	r3, r4, ip
 80010ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80010b0:	f815 300c 	ldrb.w	r3, [r5, ip]
 80010b4:	b113      	cbz	r3, 80010bc <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80010b6:	f10c 0c01 	add.w	ip, ip, #1
 80010ba:	e7f0      	b.n	800109e <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80010bc:	2300      	movs	r3, #0
 80010be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80010c2:	2e06      	cmp	r6, #6
 80010c4:	d900      	bls.n	80010c8 <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80010c6:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80010c8:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80010ca:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80010cc:	2500      	movs	r5, #0
 80010ce:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80010d0:	1d20      	adds	r0, r4, #4
 80010d2:	f7ff fc2e 	bl	8000932 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80010d6:	f104 0018 	add.w	r0, r4, #24
 80010da:	f7ff fc2a 	bl	8000932 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80010de:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010e0:	f1c6 0607 	rsb	r6, r6, #7
 80010e4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80010e6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80010e8:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80010ea:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010ee:	464a      	mov	r2, r9
 80010f0:	4641      	mov	r1, r8
 80010f2:	4638      	mov	r0, r7
 80010f4:	f000 fc42 	bl	800197c <pxPortInitialiseStack>
 80010f8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80010fa:	f1ba 0f00 	cmp.w	sl, #0
 80010fe:	d001      	beq.n	8001104 <prvInitialiseNewTask+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001100:	f8ca 4000 	str.w	r4, [sl]
}
 8001104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001108:	2300      	movs	r3, #0
 800110a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800110e:	e7d8      	b.n	80010c2 <prvInitialiseNewTask+0x58>

08001110 <prvInitialiseTaskLists>:
{
 8001110:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001112:	2400      	movs	r4, #0
 8001114:	e007      	b.n	8001126 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001116:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800111a:	0093      	lsls	r3, r2, #2
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <prvInitialiseTaskLists+0x48>)
 800111e:	4418      	add	r0, r3
 8001120:	f7ff fbfc 	bl	800091c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001124:	3401      	adds	r4, #1
 8001126:	2c06      	cmp	r4, #6
 8001128:	d9f5      	bls.n	8001116 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800112a:	4d0c      	ldr	r5, [pc, #48]	; (800115c <prvInitialiseTaskLists+0x4c>)
 800112c:	4628      	mov	r0, r5
 800112e:	f7ff fbf5 	bl	800091c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001132:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <prvInitialiseTaskLists+0x50>)
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff fbf1 	bl	800091c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <prvInitialiseTaskLists+0x54>)
 800113c:	f7ff fbee 	bl	800091c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <prvInitialiseTaskLists+0x58>)
 8001142:	f7ff fbeb 	bl	800091c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <prvInitialiseTaskLists+0x5c>)
 8001148:	f7ff fbe8 	bl	800091c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <prvInitialiseTaskLists+0x60>)
 800114e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <prvInitialiseTaskLists+0x64>)
 8001152:	601c      	str	r4, [r3, #0]
}
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop
 8001158:	20000040 	.word	0x20000040
 800115c:	200000e0 	.word	0x200000e0
 8001160:	200000f4 	.word	0x200000f4
 8001164:	20000118 	.word	0x20000118
 8001168:	20000144 	.word	0x20000144
 800116c:	20000130 	.word	0x20000130
 8001170:	20000038 	.word	0x20000038
 8001174:	2000003c 	.word	0x2000003c

08001178 <prvAddNewTaskToReadyList>:
{
 8001178:	b510      	push	{r4, lr}
 800117a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800117c:	f000 fc2a 	bl	80019d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001180:	4a22      	ldr	r2, [pc, #136]	; (800120c <prvAddNewTaskToReadyList+0x94>)
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <prvAddNewTaskToReadyList+0x98>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	b15b      	cbz	r3, 80011a6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <prvAddNewTaskToReadyList+0x9c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	b96b      	cbnz	r3, 80011b0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <prvAddNewTaskToReadyList+0x98>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800119c:	429a      	cmp	r2, r3
 800119e:	d807      	bhi.n	80011b0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <prvAddNewTaskToReadyList+0x98>)
 80011a2:	601c      	str	r4, [r3, #0]
 80011a4:	e004      	b.n	80011b0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <prvAddNewTaskToReadyList+0x98>)
 80011a8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80011aa:	6813      	ldr	r3, [r2, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d029      	beq.n	8001204 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80011b0:	4a19      	ldr	r2, [pc, #100]	; (8001218 <prvAddNewTaskToReadyList+0xa0>)
 80011b2:	6813      	ldr	r3, [r2, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80011b8:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80011ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80011bc:	2301      	movs	r3, #1
 80011be:	4083      	lsls	r3, r0
 80011c0:	4a16      	ldr	r2, [pc, #88]	; (800121c <prvAddNewTaskToReadyList+0xa4>)
 80011c2:	6811      	ldr	r1, [r2, #0]
 80011c4:	430b      	orrs	r3, r1
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011cc:	1d21      	adds	r1, r4, #4
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <prvAddNewTaskToReadyList+0xa8>)
 80011d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80011d4:	f7ff fbb0 	bl	8000938 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80011d8:	f000 fc1e 	bl	8001a18 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <prvAddNewTaskToReadyList+0x9c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b17b      	cbz	r3, 8001202 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <prvAddNewTaskToReadyList+0x98>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d209      	bcs.n	8001202 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80011ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	f3bf 8f6f 	isb	sy
}
 8001202:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8001204:	f7ff ff84 	bl	8001110 <prvInitialiseTaskLists>
 8001208:	e7d2      	b.n	80011b0 <prvAddNewTaskToReadyList+0x38>
 800120a:	bf00      	nop
 800120c:	200000cc 	.word	0x200000cc
 8001210:	20000034 	.word	0x20000034
 8001214:	2000012c 	.word	0x2000012c
 8001218:	200000d8 	.word	0x200000d8
 800121c:	200000dc 	.word	0x200000dc
 8001220:	20000040 	.word	0x20000040

08001224 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <prvCheckTasksWaitingTermination+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b1d3      	cbz	r3, 8001260 <prvCheckTasksWaitingTermination+0x3c>
{
 800122a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800122c:	f000 fbd2 	bl	80019d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <prvCheckTasksWaitingTermination+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001236:	1d20      	adds	r0, r4, #4
 8001238:	f7ff fba2 	bl	8000980 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <prvCheckTasksWaitingTermination+0x48>)
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	3b01      	subs	r3, #1
 8001242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <prvCheckTasksWaitingTermination+0x40>)
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800124c:	f000 fbe4 	bl	8001a18 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001250:	4620      	mov	r0, r4
 8001252:	f7ff ff01 	bl	8001058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <prvCheckTasksWaitingTermination+0x40>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1e6      	bne.n	800122c <prvCheckTasksWaitingTermination+0x8>
}
 800125e:	bd10      	pop	{r4, pc}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200000d0 	.word	0x200000d0
 8001268:	20000144 	.word	0x20000144
 800126c:	200000cc 	.word	0x200000cc

08001270 <prvIdleTask>:
{
 8001270:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8001272:	f7ff ffd7 	bl	8001224 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <prvIdleTask+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d9f9      	bls.n	8001272 <prvIdleTask+0x2>
				taskYIELD();
 800127e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001286:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800128a:	f3bf 8f4f 	dsb	sy
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	e7ee      	b.n	8001272 <prvIdleTask+0x2>
 8001294:	20000040 	.word	0x20000040

08001298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001298:	b570      	push	{r4, r5, r6, lr}
 800129a:	4604      	mov	r4, r0
 800129c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <prvAddCurrentTaskToDelayedList+0x7c>)
 80012a0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <prvAddCurrentTaskToDelayedList+0x80>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	3004      	adds	r0, #4
 80012a8:	f7ff fb6a 	bl	8000980 <uxListRemove>
 80012ac:	b950      	cbnz	r0, 80012c4 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <prvAddCurrentTaskToDelayedList+0x80>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b4:	2301      	movs	r3, #1
 80012b6:	fa03 f202 	lsl.w	r2, r3, r2
 80012ba:	4918      	ldr	r1, [pc, #96]	; (800131c <prvAddCurrentTaskToDelayedList+0x84>)
 80012bc:	680b      	ldr	r3, [r1, #0]
 80012be:	ea23 0302 	bic.w	r3, r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80012c4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80012c8:	d00d      	beq.n	80012e6 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80012ca:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <prvAddCurrentTaskToDelayedList+0x80>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80012d2:	42a6      	cmp	r6, r4
 80012d4:	d910      	bls.n	80012f8 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <prvAddCurrentTaskToDelayedList+0x88>)
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <prvAddCurrentTaskToDelayedList+0x80>)
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	3104      	adds	r1, #4
 80012e0:	f7ff fb35 	bl	800094e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	d0ef      	beq.n	80012ca <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <prvAddCurrentTaskToDelayedList+0x80>)
 80012ec:	6819      	ldr	r1, [r3, #0]
 80012ee:	3104      	adds	r1, #4
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <prvAddCurrentTaskToDelayedList+0x8c>)
 80012f2:	f7ff fb21 	bl	8000938 <vListInsertEnd>
 80012f6:	e7f5      	b.n	80012e4 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <prvAddCurrentTaskToDelayedList+0x90>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <prvAddCurrentTaskToDelayedList+0x80>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	3104      	adds	r1, #4
 8001302:	f7ff fb24 	bl	800094e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <prvAddCurrentTaskToDelayedList+0x94>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	42a3      	cmp	r3, r4
 800130c:	d9ea      	bls.n	80012e4 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <prvAddCurrentTaskToDelayedList+0x94>)
 8001310:	601c      	str	r4, [r3, #0]
}
 8001312:	e7e7      	b.n	80012e4 <prvAddCurrentTaskToDelayedList+0x4c>
 8001314:	20000158 	.word	0x20000158
 8001318:	20000034 	.word	0x20000034
 800131c:	200000dc 	.word	0x200000dc
 8001320:	2000003c 	.word	0x2000003c
 8001324:	20000130 	.word	0x20000130
 8001328:	20000038 	.word	0x20000038
 800132c:	2000010c 	.word	0x2000010c

08001330 <xTaskCreate>:
	{
 8001330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001334:	b085      	sub	sp, #20
 8001336:	4607      	mov	r7, r0
 8001338:	4688      	mov	r8, r1
 800133a:	4614      	mov	r4, r2
 800133c:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800133e:	0090      	lsls	r0, r2, #2
 8001340:	f000 fd00 	bl	8001d44 <pvPortMalloc>
			if( pxStack != NULL )
 8001344:	b1f0      	cbz	r0, 8001384 <xTaskCreate+0x54>
 8001346:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001348:	205c      	movs	r0, #92	; 0x5c
 800134a:	f000 fcfb 	bl	8001d44 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800134e:	4605      	mov	r5, r0
 8001350:	b1a0      	cbz	r0, 800137c <xTaskCreate+0x4c>
					pxNewTCB->pxStack = pxStack;
 8001352:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8001356:	b1d5      	cbz	r5, 800138e <xTaskCreate+0x5e>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001358:	2300      	movs	r3, #0
 800135a:	9303      	str	r3, [sp, #12]
 800135c:	9502      	str	r5, [sp, #8]
 800135e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4633      	mov	r3, r6
 8001368:	4622      	mov	r2, r4
 800136a:	4641      	mov	r1, r8
 800136c:	4638      	mov	r0, r7
 800136e:	f7ff fe7c 	bl	800106a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001372:	4628      	mov	r0, r5
 8001374:	f7ff ff00 	bl	8001178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001378:	2001      	movs	r0, #1
 800137a:	e005      	b.n	8001388 <xTaskCreate+0x58>
					vPortFree( pxStack );
 800137c:	4648      	mov	r0, r9
 800137e:	f000 fd5f 	bl	8001e40 <vPortFree>
 8001382:	e7e8      	b.n	8001356 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8001388:	b005      	add	sp, #20
 800138a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800138e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8001392:	e7f9      	b.n	8001388 <xTaskCreate+0x58>

08001394 <vTaskStartScheduler>:
{
 8001394:	b500      	push	{lr}
 8001396:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <vTaskStartScheduler+0x64>)
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	4916      	ldr	r1, [pc, #88]	; (80013fc <vTaskStartScheduler+0x68>)
 80013a4:	4816      	ldr	r0, [pc, #88]	; (8001400 <vTaskStartScheduler+0x6c>)
 80013a6:	f7ff ffc3 	bl	8001330 <xTaskCreate>
	if( xReturn == pdPASS )
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d005      	beq.n	80013ba <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80013ae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80013b2:	d017      	beq.n	80013e4 <vTaskStartScheduler+0x50>
}
 80013b4:	b003      	add	sp, #12
 80013b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013be:	f383 8811 	msr	BASEPRI, r3
 80013c2:	f3bf 8f6f 	isb	sy
 80013c6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <vTaskStartScheduler+0x70>)
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <vTaskStartScheduler+0x74>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <vTaskStartScheduler+0x78>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80013de:	f000 fb93 	bl	8001b08 <xPortStartScheduler>
 80013e2:	e7e7      	b.n	80013b4 <vTaskStartScheduler+0x20>
 80013e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e8:	f383 8811 	msr	BASEPRI, r3
 80013ec:	f3bf 8f6f 	isb	sy
 80013f0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80013f4:	e7fe      	b.n	80013f4 <vTaskStartScheduler+0x60>
 80013f6:	bf00      	nop
 80013f8:	20000108 	.word	0x20000108
 80013fc:	080029c4 	.word	0x080029c4
 8001400:	08001271 	.word	0x08001271
 8001404:	2000010c 	.word	0x2000010c
 8001408:	2000012c 	.word	0x2000012c
 800140c:	20000158 	.word	0x20000158

08001410 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001410:	4a02      	ldr	r2, [pc, #8]	; (800141c <vTaskSuspendAll+0xc>)
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200000d4 	.word	0x200000d4

08001420 <xTaskIncrementTick>:
{
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <xTaskIncrementTick+0xec>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d169      	bne.n	80014fe <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800142a:	4b39      	ldr	r3, [pc, #228]	; (8001510 <xTaskIncrementTick+0xf0>)
 800142c:	681d      	ldr	r5, [r3, #0]
 800142e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8001430:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001432:	b9c5      	cbnz	r5, 8001466 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <xTaskIncrementTick+0xf4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b143      	cbz	r3, 800144e <xTaskIncrementTick+0x2e>
 800143c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001440:	f383 8811 	msr	BASEPRI, r3
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	f3bf 8f4f 	dsb	sy
 800144c:	e7fe      	b.n	800144c <xTaskIncrementTick+0x2c>
 800144e:	4a31      	ldr	r2, [pc, #196]	; (8001514 <xTaskIncrementTick+0xf4>)
 8001450:	6811      	ldr	r1, [r2, #0]
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <xTaskIncrementTick+0xf8>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	6010      	str	r0, [r2, #0]
 8001458:	6019      	str	r1, [r3, #0]
 800145a:	4a30      	ldr	r2, [pc, #192]	; (800151c <xTaskIncrementTick+0xfc>)
 800145c:	6813      	ldr	r3, [r2, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	f7ff fde3 	bl	800102c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <xTaskIncrementTick+0x100>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	42ab      	cmp	r3, r5
 800146c:	d93d      	bls.n	80014ea <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800146e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <xTaskIncrementTick+0x104>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800147a:	009a      	lsls	r2, r3, #2
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <xTaskIncrementTick+0x108>)
 800147e:	589b      	ldr	r3, [r3, r2]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d900      	bls.n	8001486 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8001484:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <xTaskIncrementTick+0x10c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03c      	beq.n	8001508 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800148e:	2701      	movs	r7, #1
	return xSwitchRequired;
 8001490:	e03a      	b.n	8001508 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8001492:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <xTaskIncrementTick+0xf4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b343      	cbz	r3, 80014ee <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <xTaskIncrementTick+0xf4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80014a4:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80014a6:	429d      	cmp	r5, r3
 80014a8:	d326      	bcc.n	80014f8 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014aa:	1d26      	adds	r6, r4, #4
 80014ac:	4630      	mov	r0, r6
 80014ae:	f7ff fa67 	bl	8000980 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014b4:	b11b      	cbz	r3, 80014be <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014b6:	f104 0018 	add.w	r0, r4, #24
 80014ba:	f7ff fa61 	bl	8000980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80014be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014c0:	2201      	movs	r2, #1
 80014c2:	409a      	lsls	r2, r3
 80014c4:	491a      	ldr	r1, [pc, #104]	; (8001530 <xTaskIncrementTick+0x110>)
 80014c6:	6808      	ldr	r0, [r1, #0]
 80014c8:	4302      	orrs	r2, r0
 80014ca:	600a      	str	r2, [r1, #0]
 80014cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014d0:	009a      	lsls	r2, r3, #2
 80014d2:	4631      	mov	r1, r6
 80014d4:	4814      	ldr	r0, [pc, #80]	; (8001528 <xTaskIncrementTick+0x108>)
 80014d6:	4410      	add	r0, r2
 80014d8:	f7ff fa2e 	bl	8000938 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <xTaskIncrementTick+0x104>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d2d4      	bcs.n	8001492 <xTaskIncrementTick+0x72>
 80014e8:	e7d4      	b.n	8001494 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80014ea:	2700      	movs	r7, #0
 80014ec:	e7d2      	b.n	8001494 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <xTaskIncrementTick+0x100>)
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f4:	601a      	str	r2, [r3, #0]
					break;
 80014f6:	e7bb      	b.n	8001470 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <xTaskIncrementTick+0x100>)
 80014fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80014fc:	e7b8      	b.n	8001470 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <xTaskIncrementTick+0x114>)
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001506:	2700      	movs	r7, #0
}
 8001508:	4638      	mov	r0, r7
 800150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800150c:	200000d4 	.word	0x200000d4
 8001510:	20000158 	.word	0x20000158
 8001514:	20000038 	.word	0x20000038
 8001518:	2000003c 	.word	0x2000003c
 800151c:	20000110 	.word	0x20000110
 8001520:	2000010c 	.word	0x2000010c
 8001524:	20000034 	.word	0x20000034
 8001528:	20000040 	.word	0x20000040
 800152c:	2000015c 	.word	0x2000015c
 8001530:	200000dc 	.word	0x200000dc
 8001534:	20000114 	.word	0x20000114

08001538 <xTaskResumeAll>:
{
 8001538:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800153a:	4b35      	ldr	r3, [pc, #212]	; (8001610 <xTaskResumeAll+0xd8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b943      	cbnz	r3, 8001552 <xTaskResumeAll+0x1a>
 8001540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001544:	f383 8811 	msr	BASEPRI, r3
 8001548:	f3bf 8f6f 	isb	sy
 800154c:	f3bf 8f4f 	dsb	sy
 8001550:	e7fe      	b.n	8001550 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8001552:	f000 fa3f 	bl	80019d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <xTaskResumeAll+0xd8>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	3a01      	subs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d14f      	bne.n	8001604 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <xTaskResumeAll+0xdc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b90b      	cbnz	r3, 800156e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800156a:	2400      	movs	r4, #0
 800156c:	e04b      	b.n	8001606 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800156e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <xTaskResumeAll+0xe0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b31b      	cbz	r3, 80015be <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <xTaskResumeAll+0xe0>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800157c:	f104 0018 	add.w	r0, r4, #24
 8001580:	f7ff f9fe 	bl	8000980 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001584:	1d25      	adds	r5, r4, #4
 8001586:	4628      	mov	r0, r5
 8001588:	f7ff f9fa 	bl	8000980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800158c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800158e:	2301      	movs	r3, #1
 8001590:	4083      	lsls	r3, r0
 8001592:	4a22      	ldr	r2, [pc, #136]	; (800161c <xTaskResumeAll+0xe4>)
 8001594:	6811      	ldr	r1, [r2, #0]
 8001596:	430b      	orrs	r3, r1
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800159e:	4629      	mov	r1, r5
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <xTaskResumeAll+0xe8>)
 80015a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80015a6:	f7ff f9c7 	bl	8000938 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <xTaskResumeAll+0xec>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3dc      	bcc.n	8001570 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <xTaskResumeAll+0xf0>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e7d8      	b.n	8001570 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80015be:	b10c      	cbz	r4, 80015c4 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80015c0:	f7ff fd34 	bl	800102c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <xTaskResumeAll+0xf4>)
 80015c6:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80015c8:	b984      	cbnz	r4, 80015ec <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <xTaskResumeAll+0xf0>)
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	b1d4      	cbz	r4, 8001606 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80015d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80015dc:	f3bf 8f4f 	dsb	sy
 80015e0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80015e4:	2401      	movs	r4, #1
 80015e6:	e00e      	b.n	8001606 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80015e8:	3c01      	subs	r4, #1
 80015ea:	d007      	beq.n	80015fc <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80015ec:	f7ff ff18 	bl	8001420 <xTaskIncrementTick>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d0f9      	beq.n	80015e8 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <xTaskResumeAll+0xf0>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e7f5      	b.n	80015e8 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <xTaskResumeAll+0xf4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e7e2      	b.n	80015ca <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8001604:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001606:	f000 fa07 	bl	8001a18 <vPortExitCritical>
}
 800160a:	4620      	mov	r0, r4
 800160c:	bd38      	pop	{r3, r4, r5, pc}
 800160e:	bf00      	nop
 8001610:	200000d4 	.word	0x200000d4
 8001614:	200000cc 	.word	0x200000cc
 8001618:	20000118 	.word	0x20000118
 800161c:	200000dc 	.word	0x200000dc
 8001620:	20000040 	.word	0x20000040
 8001624:	20000034 	.word	0x20000034
 8001628:	2000015c 	.word	0x2000015c
 800162c:	20000114 	.word	0x20000114

08001630 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <vTaskSwitchContext+0x84>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	b11b      	cbz	r3, 800163e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <vTaskSwitchContext+0x88>)
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <vTaskSwitchContext+0x88>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <vTaskSwitchContext+0x8c>)
 8001646:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f1c3 031f 	rsb	r3, r3, #31
 8001652:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001656:	008a      	lsls	r2, r1, #2
 8001658:	4919      	ldr	r1, [pc, #100]	; (80016c0 <vTaskSwitchContext+0x90>)
 800165a:	588a      	ldr	r2, [r1, r2]
 800165c:	b942      	cbnz	r2, 8001670 <vTaskSwitchContext+0x40>
	__asm volatile
 800165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001662:	f383 8811 	msr	BASEPRI, r3
 8001666:	f3bf 8f6f 	isb	sy
 800166a:	f3bf 8f4f 	dsb	sy
 800166e:	e7fe      	b.n	800166e <vTaskSwitchContext+0x3e>
 8001670:	4913      	ldr	r1, [pc, #76]	; (80016c0 <vTaskSwitchContext+0x90>)
 8001672:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8001676:	0082      	lsls	r2, r0, #2
 8001678:	440a      	add	r2, r1
 800167a:	6850      	ldr	r0, [r2, #4]
 800167c:	6840      	ldr	r0, [r0, #4]
 800167e:	6050      	str	r0, [r2, #4]
 8001680:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8001684:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001688:	3208      	adds	r2, #8
 800168a:	4411      	add	r1, r2
 800168c:	4288      	cmp	r0, r1
 800168e:	d009      	beq.n	80016a4 <vTaskSwitchContext+0x74>
 8001690:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001694:	009a      	lsls	r2, r3, #2
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <vTaskSwitchContext+0x90>)
 8001698:	4413      	add	r3, r2
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <vTaskSwitchContext+0x94>)
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016a4:	6840      	ldr	r0, [r0, #4]
 80016a6:	4662      	mov	r2, ip
 80016a8:	0091      	lsls	r1, r2, #2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <vTaskSwitchContext+0x90>)
 80016ac:	440a      	add	r2, r1
 80016ae:	6050      	str	r0, [r2, #4]
 80016b0:	e7ee      	b.n	8001690 <vTaskSwitchContext+0x60>
 80016b2:	bf00      	nop
 80016b4:	200000d4 	.word	0x200000d4
 80016b8:	2000015c 	.word	0x2000015c
 80016bc:	200000dc 	.word	0x200000dc
 80016c0:	20000040 	.word	0x20000040
 80016c4:	20000034 	.word	0x20000034

080016c8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80016c8:	b158      	cbz	r0, 80016e2 <vTaskPlaceOnEventList+0x1a>
{
 80016ca:	b510      	push	{r4, lr}
 80016cc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <vTaskPlaceOnEventList+0x2c>)
 80016d0:	6811      	ldr	r1, [r2, #0]
 80016d2:	3118      	adds	r1, #24
 80016d4:	f7ff f93b 	bl	800094e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80016d8:	2101      	movs	r1, #1
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fddc 	bl	8001298 <prvAddCurrentTaskToDelayedList>
}
 80016e0:	bd10      	pop	{r4, pc}
 80016e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80016f2:	e7fe      	b.n	80016f2 <vTaskPlaceOnEventList+0x2a>
 80016f4:	20000034 	.word	0x20000034

080016f8 <xTaskRemoveFromEventList>:
{
 80016f8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016fa:	68c3      	ldr	r3, [r0, #12]
 80016fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80016fe:	b324      	cbz	r4, 800174a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001700:	f104 0518 	add.w	r5, r4, #24
 8001704:	4628      	mov	r0, r5
 8001706:	f7ff f93b 	bl	8000980 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <xTaskRemoveFromEventList+0x74>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	bb2b      	cbnz	r3, 800175c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001710:	1d25      	adds	r5, r4, #4
 8001712:	4628      	mov	r0, r5
 8001714:	f7ff f934 	bl	8000980 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001718:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800171a:	2301      	movs	r3, #1
 800171c:	4083      	lsls	r3, r0
 800171e:	4a14      	ldr	r2, [pc, #80]	; (8001770 <xTaskRemoveFromEventList+0x78>)
 8001720:	6811      	ldr	r1, [r2, #0]
 8001722:	430b      	orrs	r3, r1
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800172a:	4629      	mov	r1, r5
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <xTaskRemoveFromEventList+0x7c>)
 800172e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001732:	f7ff f901 	bl	8000938 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001736:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <xTaskRemoveFromEventList+0x80>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	429a      	cmp	r2, r3
 8001740:	d911      	bls.n	8001766 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8001742:	2001      	movs	r0, #1
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <xTaskRemoveFromEventList+0x84>)
 8001746:	6018      	str	r0, [r3, #0]
}
 8001748:	bd38      	pop	{r3, r4, r5, pc}
 800174a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800174e:	f383 8811 	msr	BASEPRI, r3
 8001752:	f3bf 8f6f 	isb	sy
 8001756:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800175a:	e7fe      	b.n	800175a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800175c:	4629      	mov	r1, r5
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <xTaskRemoveFromEventList+0x88>)
 8001760:	f7ff f8ea 	bl	8000938 <vListInsertEnd>
 8001764:	e7e7      	b.n	8001736 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8001766:	2000      	movs	r0, #0
	return xReturn;
 8001768:	e7ee      	b.n	8001748 <xTaskRemoveFromEventList+0x50>
 800176a:	bf00      	nop
 800176c:	200000d4 	.word	0x200000d4
 8001770:	200000dc 	.word	0x200000dc
 8001774:	20000040 	.word	0x20000040
 8001778:	20000034 	.word	0x20000034
 800177c:	2000015c 	.word	0x2000015c
 8001780:	20000118 	.word	0x20000118

08001784 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <vTaskInternalSetTimeOutState+0x10>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <vTaskInternalSetTimeOutState+0x14>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6043      	str	r3, [r0, #4]
}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000110 	.word	0x20000110
 8001798:	20000158 	.word	0x20000158

0800179c <xTaskCheckForTimeOut>:
{
 800179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800179e:	b1c8      	cbz	r0, 80017d4 <xTaskCheckForTimeOut+0x38>
 80017a0:	460c      	mov	r4, r1
 80017a2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80017a4:	b1f9      	cbz	r1, 80017e6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80017a6:	f000 f915 	bl	80019d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <xTaskCheckForTimeOut+0x7c>)
 80017ac:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80017ae:	686b      	ldr	r3, [r5, #4]
 80017b0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80017b2:	6822      	ldr	r2, [r4, #0]
 80017b4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80017b8:	d026      	beq.n	8001808 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80017ba:	4e18      	ldr	r6, [pc, #96]	; (800181c <xTaskCheckForTimeOut+0x80>)
 80017bc:	6836      	ldr	r6, [r6, #0]
 80017be:	682f      	ldr	r7, [r5, #0]
 80017c0:	42b7      	cmp	r7, r6
 80017c2:	d001      	beq.n	80017c8 <xTaskCheckForTimeOut+0x2c>
 80017c4:	428b      	cmp	r3, r1
 80017c6:	d924      	bls.n	8001812 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80017c8:	4282      	cmp	r2, r0
 80017ca:	d815      	bhi.n	80017f8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80017d0:	2401      	movs	r4, #1
 80017d2:	e01a      	b.n	800180a <xTaskCheckForTimeOut+0x6e>
 80017d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d8:	f383 8811 	msr	BASEPRI, r3
 80017dc:	f3bf 8f6f 	isb	sy
 80017e0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80017e4:	e7fe      	b.n	80017e4 <xTaskCheckForTimeOut+0x48>
 80017e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ea:	f383 8811 	msr	BASEPRI, r3
 80017ee:	f3bf 8f6f 	isb	sy
 80017f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80017f6:	e7fe      	b.n	80017f6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80017f8:	1a5b      	subs	r3, r3, r1
 80017fa:	4413      	add	r3, r2
 80017fc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80017fe:	4628      	mov	r0, r5
 8001800:	f7ff ffc0 	bl	8001784 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001804:	2400      	movs	r4, #0
 8001806:	e000      	b.n	800180a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8001808:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800180a:	f000 f905 	bl	8001a18 <vPortExitCritical>
}
 800180e:	4620      	mov	r0, r4
 8001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8001812:	2401      	movs	r4, #1
 8001814:	e7f9      	b.n	800180a <xTaskCheckForTimeOut+0x6e>
 8001816:	bf00      	nop
 8001818:	20000158 	.word	0x20000158
 800181c:	20000110 	.word	0x20000110

08001820 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8001820:	4b01      	ldr	r3, [pc, #4]	; (8001828 <vTaskMissedYield+0x8>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	4770      	bx	lr
 8001828:	2000015c 	.word	0x2000015c

0800182c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <xTaskGetSchedulerState+0x18>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b133      	cbz	r3, 8001840 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <xTaskGetSchedulerState+0x1c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b10b      	cbz	r3, 800183c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8001838:	2000      	movs	r0, #0
	}
 800183a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800183c:	2002      	movs	r0, #2
 800183e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001840:	2001      	movs	r0, #1
 8001842:	4770      	bx	lr
 8001844:	2000012c 	.word	0x2000012c
 8001848:	200000d4 	.word	0x200000d4

0800184c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800184c:	2800      	cmp	r0, #0
 800184e:	d04c      	beq.n	80018ea <xTaskPriorityDisinherit+0x9e>
	{
 8001850:	b538      	push	{r3, r4, r5, lr}
 8001852:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <xTaskPriorityDisinherit+0xa8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4283      	cmp	r3, r0
 800185a:	d008      	beq.n	800186e <xTaskPriorityDisinherit+0x22>
 800185c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001860:	f383 8811 	msr	BASEPRI, r3
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	f3bf 8f4f 	dsb	sy
 800186c:	e7fe      	b.n	800186c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800186e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001870:	b943      	cbnz	r3, 8001884 <xTaskPriorityDisinherit+0x38>
 8001872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001876:	f383 8811 	msr	BASEPRI, r3
 800187a:	f3bf 8f6f 	isb	sy
 800187e:	f3bf 8f4f 	dsb	sy
 8001882:	e7fe      	b.n	8001882 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8001884:	3b01      	subs	r3, #1
 8001886:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001888:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800188a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800188c:	4291      	cmp	r1, r2
 800188e:	d02e      	beq.n	80018ee <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001890:	b10b      	cbz	r3, 8001896 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8001892:	2000      	movs	r0, #0
	}
 8001894:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001896:	1d05      	adds	r5, r0, #4
 8001898:	4628      	mov	r0, r5
 800189a:	f7ff f871 	bl	8000980 <uxListRemove>
 800189e:	b970      	cbnz	r0, 80018be <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80018a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018a2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4913      	ldr	r1, [pc, #76]	; (80018f8 <xTaskPriorityDisinherit+0xac>)
 80018aa:	58cb      	ldr	r3, [r1, r3]
 80018ac:	b93b      	cbnz	r3, 80018be <xTaskPriorityDisinherit+0x72>
 80018ae:	2301      	movs	r3, #1
 80018b0:	fa03 f202 	lsl.w	r2, r3, r2
 80018b4:	4911      	ldr	r1, [pc, #68]	; (80018fc <xTaskPriorityDisinherit+0xb0>)
 80018b6:	680b      	ldr	r3, [r1, #0]
 80018b8:	ea23 0302 	bic.w	r3, r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80018be:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80018c0:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018c2:	f1c0 0307 	rsb	r3, r0, #7
 80018c6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80018c8:	2401      	movs	r4, #1
 80018ca:	fa04 f300 	lsl.w	r3, r4, r0
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <xTaskPriorityDisinherit+0xb0>)
 80018d0:	6811      	ldr	r1, [r2, #0]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018da:	4629      	mov	r1, r5
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <xTaskPriorityDisinherit+0xac>)
 80018de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80018e2:	f7ff f829 	bl	8000938 <vListInsertEnd>
					xReturn = pdTRUE;
 80018e6:	4620      	mov	r0, r4
 80018e8:	e7d4      	b.n	8001894 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80018ea:	2000      	movs	r0, #0
	}
 80018ec:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80018ee:	2000      	movs	r0, #0
 80018f0:	e7d0      	b.n	8001894 <xTaskPriorityDisinherit+0x48>
 80018f2:	bf00      	nop
 80018f4:	20000034 	.word	0x20000034
 80018f8:	20000040 	.word	0x20000040
 80018fc:	200000dc 	.word	0x200000dc

08001900 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001900:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <prvTaskExitError+0x3c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800190e:	d008      	beq.n	8001922 <prvTaskExitError+0x22>
 8001910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001914:	f383 8811 	msr	BASEPRI, r3
 8001918:	f3bf 8f6f 	isb	sy
 800191c:	f3bf 8f4f 	dsb	sy
 8001920:	e7fe      	b.n	8001920 <prvTaskExitError+0x20>
 8001922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001926:	f383 8811 	msr	BASEPRI, r3
 800192a:	f3bf 8f6f 	isb	sy
 800192e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001932:	9b01      	ldr	r3, [sp, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0fc      	beq.n	8001932 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001938:	b002      	add	sp, #8
 800193a:	4770      	bx	lr
 800193c:	20000004 	.word	0x20000004

08001940 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <prvPortStartFirstTask+0x24>)
 8001942:	6800      	ldr	r0, [r0, #0]
 8001944:	6800      	ldr	r0, [r0, #0]
 8001946:	f380 8808 	msr	MSP, r0
 800194a:	f04f 0000 	mov.w	r0, #0
 800194e:	f380 8814 	msr	CONTROL, r0
 8001952:	b662      	cpsie	i
 8001954:	b661      	cpsie	f
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	df00      	svc	0
 8001960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001962:	0000      	.short	0x0000
 8001964:	e000ed08 	.word	0xe000ed08

08001968 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001968:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001978 <vPortEnableVFP+0x10>
 800196c:	6801      	ldr	r1, [r0, #0]
 800196e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001972:	6001      	str	r1, [r0, #0]
 8001974:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001976:	0000      	.short	0x0000
 8001978:	e000ed88 	.word	0xe000ed88

0800197c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800197c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001980:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001984:	f021 0101 	bic.w	r1, r1, #1
 8001988:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <pxPortInitialiseStack+0x28>)
 800198e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001992:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001996:	f06f 0302 	mvn.w	r3, #2
 800199a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800199e:	3844      	subs	r0, #68	; 0x44
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	08001901 	.word	0x08001901
	...

080019b0 <SVC_Handler>:
	__asm volatile (
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <pxCurrentTCBConst2>)
 80019b2:	6819      	ldr	r1, [r3, #0]
 80019b4:	6808      	ldr	r0, [r1, #0]
 80019b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ba:	f380 8809 	msr	PSP, r0
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f380 8811 	msr	BASEPRI, r0
 80019ca:	4770      	bx	lr
 80019cc:	f3af 8000 	nop.w

080019d0 <pxCurrentTCBConst2>:
 80019d0:	20000034 	.word	0x20000034

080019d4 <vPortEnterCritical>:
 80019d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d8:	f383 8811 	msr	BASEPRI, r3
 80019dc:	f3bf 8f6f 	isb	sy
 80019e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <vPortEnterCritical+0x40>)
 80019e6:	6813      	ldr	r3, [r2, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d000      	beq.n	80019f2 <vPortEnterCritical+0x1e>
}
 80019f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80019f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019f6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80019fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80019fe:	d0f7      	beq.n	80019f0 <vPortEnterCritical+0x1c>
 8001a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a04:	f383 8811 	msr	BASEPRI, r3
 8001a08:	f3bf 8f6f 	isb	sy
 8001a0c:	f3bf 8f4f 	dsb	sy
 8001a10:	e7fe      	b.n	8001a10 <vPortEnterCritical+0x3c>
 8001a12:	bf00      	nop
 8001a14:	20000004 	.word	0x20000004

08001a18 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <vPortExitCritical+0x28>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b943      	cbnz	r3, 8001a30 <vPortExitCritical+0x18>
 8001a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a22:	f383 8811 	msr	BASEPRI, r3
 8001a26:	f3bf 8f6f 	isb	sy
 8001a2a:	f3bf 8f4f 	dsb	sy
 8001a2e:	e7fe      	b.n	8001a2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001a30:	3b01      	subs	r3, #1
 8001a32:	4a03      	ldr	r2, [pc, #12]	; (8001a40 <vPortExitCritical+0x28>)
 8001a34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001a36:	b90b      	cbnz	r3, 8001a3c <vPortExitCritical+0x24>
	__asm volatile
 8001a38:	f383 8811 	msr	BASEPRI, r3
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000004 	.word	0x20000004
	...

08001a50 <PendSV_Handler>:
	__asm volatile
 8001a50:	f3ef 8009 	mrs	r0, PSP
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <pxCurrentTCBConst>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	f01e 0f10 	tst.w	lr, #16
 8001a60:	bf08      	it	eq
 8001a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a6a:	6010      	str	r0, [r2, #0]
 8001a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a74:	f380 8811 	msr	BASEPRI, r0
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	f3bf 8f6f 	isb	sy
 8001a80:	f7ff fdd6 	bl	8001630 <vTaskSwitchContext>
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f380 8811 	msr	BASEPRI, r0
 8001a8c:	bc09      	pop	{r0, r3}
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	6808      	ldr	r0, [r1, #0]
 8001a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a96:	f01e 0f10 	tst.w	lr, #16
 8001a9a:	bf08      	it	eq
 8001a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001aa0:	f380 8809 	msr	PSP, r0
 8001aa4:	f3bf 8f6f 	isb	sy
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	f3af 8000 	nop.w

08001ab0 <pxCurrentTCBConst>:
 8001ab0:	20000034 	.word	0x20000034

08001ab4 <xPortSysTickHandler>:
{
 8001ab4:	b508      	push	{r3, lr}
	__asm volatile
 8001ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001ac6:	f7ff fcab 	bl	8001420 <xTaskIncrementTick>
 8001aca:	b128      	cbz	r0, 8001ad8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001acc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f383 8811 	msr	BASEPRI, r3
}
 8001ade:	bd08      	pop	{r3, pc}

08001ae0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ae0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ae8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <vPortSetupTimerInterrupt+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4905      	ldr	r1, [pc, #20]	; (8001b04 <vPortSetupTimerInterrupt+0x24>)
 8001af0:	fba1 1303 	umull	r1, r3, r1, r3
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001afa:	2307      	movs	r3, #7
 8001afc:	6113      	str	r3, [r2, #16]
}
 8001afe:	4770      	bx	lr
 8001b00:	20000000 	.word	0x20000000
 8001b04:	10624dd3 	.word	0x10624dd3

08001b08 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b0c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <xPortStartScheduler+0x100>)
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d01c      	beq.n	8001b50 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b1a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <xPortStartScheduler+0x104>)
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d01e      	beq.n	8001b62 <xPortStartScheduler+0x5a>
{
 8001b24:	b530      	push	{r4, r5, lr}
 8001b26:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <xPortStartScheduler+0x108>)
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001b30:	22ff      	movs	r2, #255	; 0xff
 8001b32:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b44:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <xPortStartScheduler+0x10c>)
 8001b46:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001b48:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <xPortStartScheduler+0x110>)
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b4e:	e01b      	b.n	8001b88 <xPortStartScheduler+0x80>
	__asm volatile
 8001b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001b60:	e7fe      	b.n	8001b60 <xPortStartScheduler+0x58>
 8001b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b66:	f383 8811 	msr	BASEPRI, r3
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b72:	e7fe      	b.n	8001b72 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8001b74:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <xPortStartScheduler+0x110>)
 8001b76:	6813      	ldr	r3, [r2, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b88:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b90:	d1f0      	bne.n	8001b74 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <xPortStartScheduler+0x110>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d008      	beq.n	8001bac <xPortStartScheduler+0xa4>
 8001b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9e:	f383 8811 	msr	BASEPRI, r3
 8001ba2:	f3bf 8f6f 	isb	sy
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	e7fe      	b.n	8001baa <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <xPortStartScheduler+0x110>)
 8001bb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001bb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bb6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001bb8:	9b01      	ldr	r3, [sp, #4]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <xPortStartScheduler+0x108>)
 8001bbe:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001bc0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8001bc4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001bd0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8001bd4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001bd8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8001bdc:	f7ff ff80 	bl	8001ae0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001be0:	2500      	movs	r5, #0
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <xPortStartScheduler+0x114>)
 8001be4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8001be6:	f7ff febf 	bl	8001968 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001bea:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8001bee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001bf2:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8001bf6:	f7ff fea3 	bl	8001940 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001bfa:	f7ff fd19 	bl	8001630 <vTaskSwitchContext>
	prvTaskExitError();
 8001bfe:	f7ff fe7f 	bl	8001900 <prvTaskExitError>
}
 8001c02:	4628      	mov	r0, r5
 8001c04:	b003      	add	sp, #12
 8001c06:	bd30      	pop	{r4, r5, pc}
 8001c08:	410fc271 	.word	0x410fc271
 8001c0c:	410fc270 	.word	0x410fc270
 8001c10:	e000e400 	.word	0xe000e400
 8001c14:	20000160 	.word	0x20000160
 8001c18:	20000164 	.word	0x20000164
 8001c1c:	20000004 	.word	0x20000004

08001c20 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001c20:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d90f      	bls.n	8001c48 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <vPortValidateInterruptPriority+0x50>)
 8001c2a:	5c9b      	ldrb	r3, [r3, r2]
 8001c2c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001c2e:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <vPortValidateInterruptPriority+0x54>)
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d908      	bls.n	8001c48 <vPortValidateInterruptPriority+0x28>
 8001c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3a:	f383 8811 	msr	BASEPRI, r3
 8001c3e:	f3bf 8f6f 	isb	sy
 8001c42:	f3bf 8f4f 	dsb	sy
 8001c46:	e7fe      	b.n	8001c46 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001c48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001c4c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8001c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <vPortValidateInterruptPriority+0x58>)
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d908      	bls.n	8001c6e <vPortValidateInterruptPriority+0x4e>
 8001c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	e7fe      	b.n	8001c6c <vPortValidateInterruptPriority+0x4c>
	}
 8001c6e:	4770      	bx	lr
 8001c70:	e000e3f0 	.word	0xe000e3f0
 8001c74:	20000160 	.word	0x20000160
 8001c78:	20000164 	.word	0x20000164

08001c7c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c7e:	f012 0f07 	tst.w	r2, #7
 8001c82:	d01e      	beq.n	8001cc2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c84:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c86:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c8a:	f5c1 53c0 	rsb	r3, r1, #6144	; 0x1800
 8001c8e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c90:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <prvHeapInit+0x50>)
 8001c94:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c96:	2100      	movs	r1, #0
 8001c98:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c9a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001c9c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8001ca2:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <prvHeapInit+0x54>)
 8001ca4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8001ca6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ca8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001caa:	1a99      	subs	r1, r3, r2
 8001cac:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001cae:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <prvHeapInit+0x58>)
 8001cb2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <prvHeapInit+0x5c>)
 8001cb6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <prvHeapInit+0x60>)
 8001cba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001cc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cc6:	e7e4      	b.n	8001c92 <prvHeapInit+0x16>
 8001cc8:	2000016c 	.word	0x2000016c
 8001ccc:	20001980 	.word	0x20001980
 8001cd0:	20000168 	.word	0x20000168
 8001cd4:	20001974 	.word	0x20001974
 8001cd8:	20001970 	.word	0x20001970
 8001cdc:	2000196c 	.word	0x2000196c

08001ce0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <prvInsertBlockIntoFreeList+0x5c>)
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4283      	cmp	r3, r0
 8001ce8:	d3fb      	bcc.n	8001ce2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cea:	6851      	ldr	r1, [r2, #4]
 8001cec:	eb02 0c01 	add.w	ip, r2, r1
 8001cf0:	4584      	cmp	ip, r0
 8001cf2:	d009      	beq.n	8001d08 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001cf4:	6841      	ldr	r1, [r0, #4]
 8001cf6:	eb00 0c01 	add.w	ip, r0, r1
 8001cfa:	4563      	cmp	r3, ip
 8001cfc:	d009      	beq.n	8001d12 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001cfe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d00:	4290      	cmp	r0, r2
 8001d02:	d019      	beq.n	8001d38 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d04:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8001d06:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d08:	6840      	ldr	r0, [r0, #4]
 8001d0a:	4401      	add	r1, r0
 8001d0c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8001d0e:	4610      	mov	r0, r2
 8001d10:	e7f0      	b.n	8001cf4 <prvInsertBlockIntoFreeList+0x14>
{
 8001d12:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d14:	4c0a      	ldr	r4, [pc, #40]	; (8001d40 <prvInsertBlockIntoFreeList+0x60>)
 8001d16:	6824      	ldr	r4, [r4, #0]
 8001d18:	42a3      	cmp	r3, r4
 8001d1a:	d00b      	beq.n	8001d34 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4419      	add	r1, r3
 8001d20:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d22:	6813      	ldr	r3, [r2, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8001d28:	4290      	cmp	r0, r2
 8001d2a:	d000      	beq.n	8001d2e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d2c:	6010      	str	r0, [r2, #0]
	}
}
 8001d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d32:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d34:	6004      	str	r4, [r0, #0]
 8001d36:	e7f7      	b.n	8001d28 <prvInsertBlockIntoFreeList+0x48>
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20001980 	.word	0x20001980
 8001d40:	20000168 	.word	0x20000168

08001d44 <pvPortMalloc>:
{
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8001d48:	f7ff fb62 	bl	8001410 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <pvPortMalloc+0xe4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	b1a3      	cbz	r3, 8001d7c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d52:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <pvPortMalloc+0xe8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	421d      	tst	r5, r3
 8001d58:	d14e      	bne.n	8001df8 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8001d5a:	b135      	cbz	r5, 8001d6a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8001d5c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d5e:	f015 0f07 	tst.w	r5, #7
 8001d62:	d002      	beq.n	8001d6a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d64:	f025 0507 	bic.w	r5, r5, #7
 8001d68:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d6a:	2d00      	cmp	r5, #0
 8001d6c:	d046      	beq.n	8001dfc <pvPortMalloc+0xb8>
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <pvPortMalloc+0xec>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	42ab      	cmp	r3, r5
 8001d74:	d351      	bcc.n	8001e1a <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8001d76:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <pvPortMalloc+0xf0>)
 8001d78:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d7a:	e004      	b.n	8001d86 <pvPortMalloc+0x42>
			prvHeapInit();
 8001d7c:	f7ff ff7e 	bl	8001c7c <prvHeapInit>
 8001d80:	e7e7      	b.n	8001d52 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8001d82:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8001d84:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d86:	6863      	ldr	r3, [r4, #4]
 8001d88:	42ab      	cmp	r3, r5
 8001d8a:	d202      	bcs.n	8001d92 <pvPortMalloc+0x4e>
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f7      	bne.n	8001d82 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <pvPortMalloc+0xe4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	42a3      	cmp	r3, r4
 8001d98:	d041      	beq.n	8001e1e <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001d9a:	6816      	ldr	r6, [r2, #0]
 8001d9c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001da2:	6863      	ldr	r3, [r4, #4]
 8001da4:	1b5b      	subs	r3, r3, r5
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d910      	bls.n	8001dcc <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001daa:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001dac:	f010 0f07 	tst.w	r0, #7
 8001db0:	d008      	beq.n	8001dc4 <pvPortMalloc+0x80>
 8001db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db6:	f383 8811 	msr	BASEPRI, r3
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	f3bf 8f4f 	dsb	sy
 8001dc2:	e7fe      	b.n	8001dc2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001dc4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001dc6:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001dc8:	f7ff ff8a 	bl	8001ce0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dcc:	6862      	ldr	r2, [r4, #4]
 8001dce:	4918      	ldr	r1, [pc, #96]	; (8001e30 <pvPortMalloc+0xec>)
 8001dd0:	680b      	ldr	r3, [r1, #0]
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001dd6:	4918      	ldr	r1, [pc, #96]	; (8001e38 <pvPortMalloc+0xf4>)
 8001dd8:	6809      	ldr	r1, [r1, #0]
 8001dda:	428b      	cmp	r3, r1
 8001ddc:	d201      	bcs.n	8001de2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001dde:	4916      	ldr	r1, [pc, #88]	; (8001e38 <pvPortMalloc+0xf4>)
 8001de0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <pvPortMalloc+0xe8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <pvPortMalloc+0xf8>)
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e002      	b.n	8001dfe <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8001df8:	2600      	movs	r6, #0
 8001dfa:	e000      	b.n	8001dfe <pvPortMalloc+0xba>
 8001dfc:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8001dfe:	f7ff fb9b 	bl	8001538 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e02:	f016 0f07 	tst.w	r6, #7
 8001e06:	d00c      	beq.n	8001e22 <pvPortMalloc+0xde>
 8001e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	e7fe      	b.n	8001e18 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 8001e1a:	2600      	movs	r6, #0
 8001e1c:	e7ef      	b.n	8001dfe <pvPortMalloc+0xba>
 8001e1e:	2600      	movs	r6, #0
 8001e20:	e7ed      	b.n	8001dfe <pvPortMalloc+0xba>
}
 8001e22:	4630      	mov	r0, r6
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
 8001e26:	bf00      	nop
 8001e28:	20000168 	.word	0x20000168
 8001e2c:	2000196c 	.word	0x2000196c
 8001e30:	20001970 	.word	0x20001970
 8001e34:	20001980 	.word	0x20001980
 8001e38:	20001974 	.word	0x20001974
 8001e3c:	20001978 	.word	0x20001978

08001e40 <vPortFree>:
	if( pv != NULL )
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d034      	beq.n	8001eae <vPortFree+0x6e>
{
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001e48:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e4c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <vPortFree+0x70>)
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	4213      	tst	r3, r2
 8001e56:	d108      	bne.n	8001e6a <vPortFree+0x2a>
 8001e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5c:	f383 8811 	msr	BASEPRI, r3
 8001e60:	f3bf 8f6f 	isb	sy
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	e7fe      	b.n	8001e68 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e6a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001e6e:	b141      	cbz	r1, 8001e82 <vPortFree+0x42>
 8001e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e74:	f383 8811 	msr	BASEPRI, r3
 8001e78:	f3bf 8f6f 	isb	sy
 8001e7c:	f3bf 8f4f 	dsb	sy
 8001e80:	e7fe      	b.n	8001e80 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e82:	ea23 0302 	bic.w	r3, r3, r2
 8001e86:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001e8a:	f7ff fac1 	bl	8001410 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e8e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001e92:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <vPortFree+0x74>)
 8001e94:	6813      	ldr	r3, [r2, #0]
 8001e96:	440b      	add	r3, r1
 8001e98:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f7ff ff20 	bl	8001ce0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <vPortFree+0x78>)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8001ea8:	f7ff fb46 	bl	8001538 <xTaskResumeAll>
}
 8001eac:	bd38      	pop	{r3, r4, r5, pc}
 8001eae:	4770      	bx	lr
 8001eb0:	2000196c 	.word	0x2000196c
 8001eb4:	20001970 	.word	0x20001970
 8001eb8:	2000197c 	.word	0x2000197c

08001ebc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_InitTick+0x40>)
 8001ec6:	7818      	ldrb	r0, [r3, #0]
 8001ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ecc:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_InitTick+0x44>)
 8001ed2:	6810      	ldr	r0, [r2, #0]
 8001ed4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ed8:	f000 f8b6 	bl	8002048 <HAL_SYSTICK_Config>
 8001edc:	b968      	cbnz	r0, 8001efa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ede:	2c0f      	cmp	r4, #15
 8001ee0:	d901      	bls.n	8001ee6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	e00a      	b.n	8001efc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4621      	mov	r1, r4
 8001eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eee:	f000 f865 	bl	8001fbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_InitTick+0x48>)
 8001ef4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001efa:	2001      	movs	r0, #1
}
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008
 8001f04:	20000000 	.word	0x20000000
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <HAL_Init>:
{
 8001f0c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_Init+0x30>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f26:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 f835 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f7ff ffc6 	bl	8001ec0 <HAL_InitTick>
  HAL_MspInit();
 8001f34:	f7ff ffc2 	bl	8001ebc <HAL_MspInit>
}
 8001f38:	2000      	movs	r0, #0
 8001f3a:	bd08      	pop	{r3, pc}
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f40:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <HAL_IncTick+0x10>)
 8001f42:	6811      	ldr	r1, [r2, #0]
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_IncTick+0x14>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	440b      	add	r3, r1
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20001988 	.word	0x20001988
 8001f54:	20000008 	.word	0x20000008

08001f58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f58:	4b01      	ldr	r3, [pc, #4]	; (8001f60 <HAL_GetTick+0x8>)
 8001f5a:	6818      	ldr	r0, [r3, #0]
}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20001988 	.word	0x20001988

08001f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fff6 	bl	8001f58 <HAL_GetTick>
 8001f6c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001f72:	d002      	beq.n	8001f7a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_Delay+0x24>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7a:	f7ff ffed 	bl	8001f58 <HAL_GetTick>
 8001f7e:	1b40      	subs	r0, r0, r5
 8001f80:	42a0      	cmp	r0, r4
 8001f82:	d3fa      	bcc.n	8001f7a <HAL_Delay+0x16>
  {
  }
}
 8001f84:	bd38      	pop	{r3, r4, r5, pc}
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008

08001f8c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001f8c:	4b01      	ldr	r3, [pc, #4]	; (8001f94 <HAL_GetREVID+0x8>)
 8001f8e:	6818      	ldr	r0, [r3, #0]
}
 8001f90:	0c00      	lsrs	r0, r0, #16
 8001f92:	4770      	bx	lr
 8001f94:	e0042000 	.word	0xe0042000

08001f98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f9a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	0200      	lsls	r0, r0, #8
 8001fa6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001faa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001fb4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_NVIC_SetPriority+0x68>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc6:	f1c3 0c07 	rsb	ip, r3, #7
 8001fca:	f1bc 0f04 	cmp.w	ip, #4
 8001fce:	bf28      	it	cs
 8001fd0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd4:	f103 0e04 	add.w	lr, r3, #4
 8001fd8:	f1be 0f06 	cmp.w	lr, #6
 8001fdc:	d918      	bls.n	8002010 <HAL_NVIC_SetPriority+0x54>
 8001fde:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001fe4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001fe8:	ea21 010c 	bic.w	r1, r1, ip
 8001fec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fee:	fa0e f303 	lsl.w	r3, lr, r3
 8001ff2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	db0b      	blt.n	8002014 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	0109      	lsls	r1, r1, #4
 8001ffe:	b2c9      	uxtb	r1, r1
 8002000:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002004:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002008:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800200c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002010:	2300      	movs	r3, #0
 8002012:	e7e5      	b.n	8001fe0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	f000 000f 	and.w	r0, r0, #15
 8002018:	0109      	lsls	r1, r1, #4
 800201a:	b2c9      	uxtb	r1, r1
 800201c:	4b02      	ldr	r3, [pc, #8]	; (8002028 <HAL_NVIC_SetPriority+0x6c>)
 800201e:	5419      	strb	r1, [r3, r0]
 8002020:	e7f4      	b.n	800200c <HAL_NVIC_SetPriority+0x50>
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00
 8002028:	e000ed14 	.word	0xe000ed14

0800202c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800202c:	2800      	cmp	r0, #0
 800202e:	db07      	blt.n	8002040 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002030:	f000 021f 	and.w	r2, r0, #31
 8002034:	0940      	lsrs	r0, r0, #5
 8002036:	2301      	movs	r3, #1
 8002038:	4093      	lsls	r3, r2
 800203a:	4a02      	ldr	r2, [pc, #8]	; (8002044 <HAL_NVIC_EnableIRQ+0x18>)
 800203c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	3801      	subs	r0, #1
 800204a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800204e:	d20b      	bcs.n	8002068 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002050:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002054:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <HAL_SYSTICK_Config+0x24>)
 8002058:	21f0      	movs	r1, #240	; 0xf0
 800205a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205e:	2000      	movs	r0, #0
 8002060:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	2207      	movs	r2, #7
 8002064:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002066:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002068:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002070:	2300      	movs	r3, #0
 8002072:	2b0f      	cmp	r3, #15
 8002074:	f200 80e4 	bhi.w	8002240 <HAL_GPIO_Init+0x1d0>
{
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	e060      	b.n	8002140 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002080:	005e      	lsls	r6, r3, #1
 8002082:	2403      	movs	r4, #3
 8002084:	40b4      	lsls	r4, r6
 8002086:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208a:	68cc      	ldr	r4, [r1, #12]
 800208c:	40b4      	lsls	r4, r6
 800208e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002090:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002092:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002094:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002098:	684c      	ldr	r4, [r1, #4]
 800209a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80020a2:	6042      	str	r2, [r0, #4]
 80020a4:	e05a      	b.n	800215c <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a6:	08dc      	lsrs	r4, r3, #3
 80020a8:	3408      	adds	r4, #8
 80020aa:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ae:	f003 0207 	and.w	r2, r3, #7
 80020b2:	0095      	lsls	r5, r2, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	40aa      	lsls	r2, r5
 80020b8:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	690a      	ldr	r2, [r1, #16]
 80020be:	40aa      	lsls	r2, r5
 80020c0:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80020c4:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80020c8:	e05c      	b.n	8002184 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	2207      	movs	r2, #7
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x60>
 80020ce:	2200      	movs	r2, #0
 80020d0:	fa02 f20e 	lsl.w	r2, r2, lr
 80020d4:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d6:	3402      	adds	r4, #2
 80020d8:	4d5a      	ldr	r5, [pc, #360]	; (8002244 <HAL_GPIO_Init+0x1d4>)
 80020da:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <HAL_GPIO_Init+0x1d8>)
 80020e0:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	ea6f 020c 	mvn.w	r2, ip
 80020e6:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	684e      	ldr	r6, [r1, #4]
 80020ec:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80020f0:	d001      	beq.n	80020f6 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80020f2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80020f6:	4c54      	ldr	r4, [pc, #336]	; (8002248 <HAL_GPIO_Init+0x1d8>)
 80020f8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80020fa:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	684e      	ldr	r6, [r1, #4]
 8002102:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002106:	d001      	beq.n	800210c <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8002108:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800210c:	4c4e      	ldr	r4, [pc, #312]	; (8002248 <HAL_GPIO_Init+0x1d8>)
 800210e:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002110:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002112:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002116:	684e      	ldr	r6, [r1, #4]
 8002118:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800211c:	d001      	beq.n	8002122 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800211e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002122:	4c49      	ldr	r4, [pc, #292]	; (8002248 <HAL_GPIO_Init+0x1d8>)
 8002124:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002126:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002128:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212a:	684d      	ldr	r5, [r1, #4]
 800212c:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8002130:	d001      	beq.n	8002136 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8002132:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002136:	4c44      	ldr	r4, [pc, #272]	; (8002248 <HAL_GPIO_Init+0x1d8>)
 8002138:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	3301      	adds	r3, #1
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d87d      	bhi.n	800223c <HAL_GPIO_Init+0x1cc>
    ioposition = 0x01U << position;
 8002140:	2201      	movs	r2, #1
 8002142:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002144:	680c      	ldr	r4, [r1, #0]
 8002146:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800214a:	ea32 0404 	bics.w	r4, r2, r4
 800214e:	d1f4      	bne.n	800213a <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002150:	684c      	ldr	r4, [r1, #4]
 8002152:	f004 0403 	and.w	r4, r4, #3
 8002156:	3c01      	subs	r4, #1
 8002158:	2c01      	cmp	r4, #1
 800215a:	d990      	bls.n	800207e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215c:	684a      	ldr	r2, [r1, #4]
 800215e:	f002 0203 	and.w	r2, r2, #3
 8002162:	2a03      	cmp	r2, #3
 8002164:	d009      	beq.n	800217a <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8002166:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002168:	005d      	lsls	r5, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	40aa      	lsls	r2, r5
 800216e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002172:	688a      	ldr	r2, [r1, #8]
 8002174:	40aa      	lsls	r2, r5
 8002176:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002178:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	684a      	ldr	r2, [r1, #4]
 800217c:	f002 0203 	and.w	r2, r2, #3
 8002180:	2a02      	cmp	r2, #2
 8002182:	d090      	beq.n	80020a6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8002184:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002186:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002190:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	684a      	ldr	r2, [r1, #4]
 8002196:	f002 0203 	and.w	r2, r2, #3
 800219a:	fa02 f20e 	lsl.w	r2, r2, lr
 800219e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80021a0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a2:	684a      	ldr	r2, [r1, #4]
 80021a4:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80021a8:	d0c7      	beq.n	800213a <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	2200      	movs	r2, #0
 80021ac:	9201      	str	r2, [sp, #4]
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_GPIO_Init+0x1dc>)
 80021b0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80021b2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80021b6:	6454      	str	r4, [r2, #68]	; 0x44
 80021b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021be:	9201      	str	r2, [sp, #4]
 80021c0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80021c2:	089c      	lsrs	r4, r3, #2
 80021c4:	1ca5      	adds	r5, r4, #2
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <HAL_GPIO_Init+0x1d4>)
 80021c8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f20e 	lsl.w	r2, r2, lr
 80021da:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021de:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_GPIO_Init+0x1e0>)
 80021e0:	4290      	cmp	r0, r2
 80021e2:	f43f af74 	beq.w	80020ce <HAL_GPIO_Init+0x5e>
 80021e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ea:	4290      	cmp	r0, r2
 80021ec:	d01a      	beq.n	8002224 <HAL_GPIO_Init+0x1b4>
 80021ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f2:	4290      	cmp	r0, r2
 80021f4:	d018      	beq.n	8002228 <HAL_GPIO_Init+0x1b8>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4290      	cmp	r0, r2
 80021fc:	d016      	beq.n	800222c <HAL_GPIO_Init+0x1bc>
 80021fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002202:	4290      	cmp	r0, r2
 8002204:	d014      	beq.n	8002230 <HAL_GPIO_Init+0x1c0>
 8002206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800220a:	4290      	cmp	r0, r2
 800220c:	d012      	beq.n	8002234 <HAL_GPIO_Init+0x1c4>
 800220e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002212:	4290      	cmp	r0, r2
 8002214:	d010      	beq.n	8002238 <HAL_GPIO_Init+0x1c8>
 8002216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221a:	4290      	cmp	r0, r2
 800221c:	f43f af55 	beq.w	80020ca <HAL_GPIO_Init+0x5a>
 8002220:	2208      	movs	r2, #8
 8002222:	e755      	b.n	80020d0 <HAL_GPIO_Init+0x60>
 8002224:	2201      	movs	r2, #1
 8002226:	e753      	b.n	80020d0 <HAL_GPIO_Init+0x60>
 8002228:	2202      	movs	r2, #2
 800222a:	e751      	b.n	80020d0 <HAL_GPIO_Init+0x60>
 800222c:	2203      	movs	r2, #3
 800222e:	e74f      	b.n	80020d0 <HAL_GPIO_Init+0x60>
 8002230:	2204      	movs	r2, #4
 8002232:	e74d      	b.n	80020d0 <HAL_GPIO_Init+0x60>
 8002234:	2205      	movs	r2, #5
 8002236:	e74b      	b.n	80020d0 <HAL_GPIO_Init+0x60>
 8002238:	2206      	movs	r2, #6
 800223a:	e749      	b.n	80020d0 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 800223c:	b002      	add	sp, #8
 800223e:	bd70      	pop	{r4, r5, r6, pc}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40013800 	.word	0x40013800
 8002248:	40013c00 	.word	0x40013c00
 800224c:	40023800 	.word	0x40023800
 8002250:	40020000 	.word	0x40020000

08002254 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002254:	b10a      	cbz	r2, 800225a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002256:	6181      	str	r1, [r0, #24]
 8002258:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800225a:	0409      	lsls	r1, r1, #16
 800225c:	6181      	str	r1, [r0, #24]
  }
}
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002260:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002262:	ea01 0203 	and.w	r2, r1, r3
 8002266:	ea21 0103 	bic.w	r1, r1, r3
 800226a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800226e:	6181      	str	r1, [r0, #24]
}
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002274:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4203      	tst	r3, r0
 800227c:	d100      	bne.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800227e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002282:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	f7fe f95e 	bl	8000544 <HAL_GPIO_EXTI_Callback>
}
 8002288:	e7f9      	b.n	800227e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800228a:	bf00      	nop
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002290:	2800      	cmp	r0, #0
 8002292:	f000 81e0 	beq.w	8002656 <HAL_RCC_OscConfig+0x3c6>
{
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229c:	6803      	ldr	r3, [r0, #0]
 800229e:	f013 0f01 	tst.w	r3, #1
 80022a2:	d03b      	beq.n	800231c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022a4:	4b9f      	ldr	r3, [pc, #636]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d02c      	beq.n	800230a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b0:	4b9c      	ldr	r3, [pc, #624]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d021      	beq.n	8002300 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022bc:	6863      	ldr	r3, [r4, #4]
 80022be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c2:	d04f      	beq.n	8002364 <HAL_RCC_OscConfig+0xd4>
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c8:	d052      	beq.n	8002370 <HAL_RCC_OscConfig+0xe0>
 80022ca:	4b96      	ldr	r3, [pc, #600]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022dc:	6863      	ldr	r3, [r4, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d050      	beq.n	8002384 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fe39 	bl	8001f58 <HAL_GetTick>
 80022e6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e8:	4b8e      	ldr	r3, [pc, #568]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022f0:	d114      	bne.n	800231c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f2:	f7ff fe31 	bl	8001f58 <HAL_GetTick>
 80022f6:	1b40      	subs	r0, r0, r5
 80022f8:	2864      	cmp	r0, #100	; 0x64
 80022fa:	d9f5      	bls.n	80022e8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80022fc:	2003      	movs	r0, #3
 80022fe:	e1b1      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002308:	d0d8      	beq.n	80022bc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230a:	4b86      	ldr	r3, [pc, #536]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002312:	d003      	beq.n	800231c <HAL_RCC_OscConfig+0x8c>
 8002314:	6863      	ldr	r3, [r4, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 819f 	beq.w	800265a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	f013 0f02 	tst.w	r3, #2
 8002322:	d054      	beq.n	80023ce <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002324:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f013 0f0c 	tst.w	r3, #12
 800232c:	d03e      	beq.n	80023ac <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232e:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002336:	2b08      	cmp	r3, #8
 8002338:	d033      	beq.n	80023a2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800233a:	68e3      	ldr	r3, [r4, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d068      	beq.n	8002412 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b79      	ldr	r3, [pc, #484]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7ff fe07 	bl	8001f58 <HAL_GetTick>
 800234a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b75      	ldr	r3, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f013 0f02 	tst.w	r3, #2
 8002354:	d154      	bne.n	8002400 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002356:	f7ff fdff 	bl	8001f58 <HAL_GetTick>
 800235a:	1b40      	subs	r0, r0, r5
 800235c:	2802      	cmp	r0, #2
 800235e:	d9f5      	bls.n	800234c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002360:	2003      	movs	r0, #3
 8002362:	e17f      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002364:	4a6f      	ldr	r2, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002366:	6813      	ldr	r3, [r2, #0]
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e7b5      	b.n	80022dc <HAL_RCC_OscConfig+0x4c>
 8002370:	4b6c      	ldr	r3, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e7ab      	b.n	80022dc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002384:	f7ff fde8 	bl	8001f58 <HAL_GetTick>
 8002388:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002392:	d0c3      	beq.n	800231c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff fde0 	bl	8001f58 <HAL_GetTick>
 8002398:	1b40      	subs	r0, r0, r5
 800239a:	2864      	cmp	r0, #100	; 0x64
 800239c:	d9f5      	bls.n	800238a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800239e:	2003      	movs	r0, #3
 80023a0:	e160      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a2:	4b60      	ldr	r3, [pc, #384]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023aa:	d1c6      	bne.n	800233a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ac:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f013 0f02 	tst.w	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_OscConfig+0x12e>
 80023b6:	68e3      	ldr	r3, [r4, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f040 8150 	bne.w	800265e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4a59      	ldr	r2, [pc, #356]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023c6:	6921      	ldr	r1, [r4, #16]
 80023c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023cc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	f013 0f08 	tst.w	r3, #8
 80023d4:	d042      	beq.n	800245c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d6:	6963      	ldr	r3, [r4, #20]
 80023d8:	b36b      	cbz	r3, 8002436 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 80023dc:	2201      	movs	r2, #1
 80023de:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7ff fdb9 	bl	8001f58 <HAL_GetTick>
 80023e6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e8:	4b4e      	ldr	r3, [pc, #312]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80023ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ec:	f013 0f02 	tst.w	r3, #2
 80023f0:	d134      	bne.n	800245c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f2:	f7ff fdb1 	bl	8001f58 <HAL_GetTick>
 80023f6:	1b40      	subs	r0, r0, r5
 80023f8:	2802      	cmp	r0, #2
 80023fa:	d9f5      	bls.n	80023e8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80023fc:	2003      	movs	r0, #3
 80023fe:	e131      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4a48      	ldr	r2, [pc, #288]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002402:	6813      	ldr	r3, [r2, #0]
 8002404:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002408:	6921      	ldr	r1, [r4, #16]
 800240a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e7dd      	b.n	80023ce <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002418:	f7ff fd9e 	bl	8001f58 <HAL_GetTick>
 800241c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f013 0f02 	tst.w	r3, #2
 8002426:	d0d2      	beq.n	80023ce <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff fd96 	bl	8001f58 <HAL_GetTick>
 800242c:	1b40      	subs	r0, r0, r5
 800242e:	2802      	cmp	r0, #2
 8002430:	d9f5      	bls.n	800241e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002432:	2003      	movs	r0, #3
 8002434:	e116      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <HAL_RCC_OscConfig+0x298>)
 8002438:	2200      	movs	r2, #0
 800243a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7ff fd8b 	bl	8001f58 <HAL_GetTick>
 8002442:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002448:	f013 0f02 	tst.w	r3, #2
 800244c:	d006      	beq.n	800245c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff fd83 	bl	8001f58 <HAL_GetTick>
 8002452:	1b40      	subs	r0, r0, r5
 8002454:	2802      	cmp	r0, #2
 8002456:	d9f5      	bls.n	8002444 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002458:	2003      	movs	r0, #3
 800245a:	e103      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	f013 0f04 	tst.w	r3, #4
 8002462:	d077      	beq.n	8002554 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002464:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800246c:	d133      	bne.n	80024d6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002476:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002486:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCC_OscConfig+0x29c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002490:	d023      	beq.n	80024da <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002492:	68a3      	ldr	r3, [r4, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d034      	beq.n	8002502 <HAL_RCC_OscConfig+0x272>
 8002498:	2b05      	cmp	r3, #5
 800249a:	d038      	beq.n	800250e <HAL_RCC_OscConfig+0x27e>
 800249c:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 800249e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	671a      	str	r2, [r3, #112]	; 0x70
 80024a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a8:	f022 0204 	bic.w	r2, r2, #4
 80024ac:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ae:	68a3      	ldr	r3, [r4, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03d      	beq.n	8002530 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7ff fd50 	bl	8001f58 <HAL_GetTick>
 80024b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	f013 0f02 	tst.w	r3, #2
 80024c2:	d146      	bne.n	8002552 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7ff fd48 	bl	8001f58 <HAL_GetTick>
 80024c8:	1b80      	subs	r0, r0, r6
 80024ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80024ce:	4298      	cmp	r0, r3
 80024d0:	d9f3      	bls.n	80024ba <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80024d2:	2003      	movs	r0, #3
 80024d4:	e0c6      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2500      	movs	r5, #0
 80024d8:	e7d6      	b.n	8002488 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_RCC_OscConfig+0x29c>)
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024e4:	f7ff fd38 	bl	8001f58 <HAL_GetTick>
 80024e8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x29c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024f2:	d1ce      	bne.n	8002492 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f4:	f7ff fd30 	bl	8001f58 <HAL_GetTick>
 80024f8:	1b80      	subs	r0, r0, r6
 80024fa:	2802      	cmp	r0, #2
 80024fc:	d9f5      	bls.n	80024ea <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80024fe:	2003      	movs	r0, #3
 8002500:	e0b0      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002504:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	e7cf      	b.n	80024ae <HAL_RCC_OscConfig+0x21e>
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_OscConfig+0x294>)
 8002510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002512:	f042 0204 	orr.w	r2, r2, #4
 8002516:	671a      	str	r2, [r3, #112]	; 0x70
 8002518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	671a      	str	r2, [r3, #112]	; 0x70
 8002520:	e7c5      	b.n	80024ae <HAL_RCC_OscConfig+0x21e>
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	42470000 	.word	0x42470000
 800252c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7ff fd12 	bl	8001f58 <HAL_GetTick>
 8002534:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	4b52      	ldr	r3, [pc, #328]	; (8002680 <HAL_RCC_OscConfig+0x3f0>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	f013 0f02 	tst.w	r3, #2
 800253e:	d008      	beq.n	8002552 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7ff fd0a 	bl	8001f58 <HAL_GetTick>
 8002544:	1b80      	subs	r0, r0, r6
 8002546:	f241 3388 	movw	r3, #5000	; 0x1388
 800254a:	4298      	cmp	r0, r3
 800254c:	d9f3      	bls.n	8002536 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800254e:	2003      	movs	r0, #3
 8002550:	e088      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002552:	b9ed      	cbnz	r5, 8002590 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002554:	69a3      	ldr	r3, [r4, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8083 	beq.w	8002662 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255c:	4a48      	ldr	r2, [pc, #288]	; (8002680 <HAL_RCC_OscConfig+0x3f0>)
 800255e:	6892      	ldr	r2, [r2, #8]
 8002560:	f002 020c 	and.w	r2, r2, #12
 8002564:	2a08      	cmp	r2, #8
 8002566:	d051      	beq.n	800260c <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002568:	2b02      	cmp	r3, #2
 800256a:	d017      	beq.n	800259c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b45      	ldr	r3, [pc, #276]	; (8002684 <HAL_RCC_OscConfig+0x3f4>)
 800256e:	2200      	movs	r2, #0
 8002570:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7ff fcf1 	bl	8001f58 <HAL_GetTick>
 8002576:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002578:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x3f0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002580:	d042      	beq.n	8002608 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002582:	f7ff fce9 	bl	8001f58 <HAL_GetTick>
 8002586:	1b00      	subs	r0, r0, r4
 8002588:	2802      	cmp	r0, #2
 800258a:	d9f5      	bls.n	8002578 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800258c:	2003      	movs	r0, #3
 800258e:	e069      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x3f0>)
 8002592:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	e7db      	b.n	8002554 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <HAL_RCC_OscConfig+0x3f4>)
 800259e:	2200      	movs	r2, #0
 80025a0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80025a2:	f7ff fcd9 	bl	8001f58 <HAL_GetTick>
 80025a6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_RCC_OscConfig+0x3f0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025b0:	d006      	beq.n	80025c0 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff fcd1 	bl	8001f58 <HAL_GetTick>
 80025b6:	1b40      	subs	r0, r0, r5
 80025b8:	2802      	cmp	r0, #2
 80025ba:	d9f5      	bls.n	80025a8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80025bc:	2003      	movs	r0, #3
 80025be:	e051      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c0:	69e3      	ldr	r3, [r4, #28]
 80025c2:	6a22      	ldr	r2, [r4, #32]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80025cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025ce:	0852      	lsrs	r2, r2, #1
 80025d0:	3a01      	subs	r2, #1
 80025d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80025dc:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_RCC_OscConfig+0x3f0>)
 80025de:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_RCC_OscConfig+0x3f4>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80025e6:	f7ff fcb7 	bl	8001f58 <HAL_GetTick>
 80025ea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x3f0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7ff fcaf 	bl	8001f58 <HAL_GetTick>
 80025fa:	1b00      	subs	r0, r0, r4
 80025fc:	2802      	cmp	r0, #2
 80025fe:	d9f5      	bls.n	80025ec <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002600:	2003      	movs	r0, #3
 8002602:	e02f      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002604:	2000      	movs	r0, #0
 8002606:	e02d      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
 8002608:	2000      	movs	r0, #0
 800260a:	e02b      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260c:	2b01      	cmp	r3, #1
 800260e:	d02b      	beq.n	8002668 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x3f0>)
 8002612:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002614:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002618:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261a:	4291      	cmp	r1, r2
 800261c:	d126      	bne.n	800266c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002624:	428a      	cmp	r2, r1
 8002626:	d123      	bne.n	8002670 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002628:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800262a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800262e:	401a      	ands	r2, r3
 8002630:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002634:	d11e      	bne.n	8002674 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002636:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800263a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800263c:	0852      	lsrs	r2, r2, #1
 800263e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002640:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002644:	d118      	bne.n	8002678 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002646:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800264a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002650:	d114      	bne.n	800267c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002652:	2000      	movs	r0, #0
 8002654:	e006      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
}
 8002658:	4770      	bx	lr
        return HAL_ERROR;
 800265a:	2001      	movs	r0, #1
 800265c:	e002      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800265e:	2001      	movs	r0, #1
 8002660:	e000      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002662:	2000      	movs	r0, #0
}
 8002664:	b002      	add	sp, #8
 8002666:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
 800266a:	e7fb      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
 800266e:	e7f9      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
 8002670:	2001      	movs	r0, #1
 8002672:	e7f7      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
 8002674:	2001      	movs	r0, #1
 8002676:	e7f5      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
 8002678:	2001      	movs	r0, #1
 800267a:	e7f3      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
 800267c:	2001      	movs	r0, #1
 800267e:	e7f1      	b.n	8002664 <HAL_RCC_OscConfig+0x3d4>
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d057      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0xbe>
 8002696:	2b08      	cmp	r3, #8
 8002698:	d157      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80026a8:	d02a      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80026b2:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80026b6:	ebb1 000c 	subs.w	r0, r1, ip
 80026ba:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80026be:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80026c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026c6:	0181      	lsls	r1, r0, #6
 80026c8:	1a09      	subs	r1, r1, r0
 80026ca:	eb63 030e 	sbc.w	r3, r3, lr
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026d4:	00c9      	lsls	r1, r1, #3
 80026d6:	eb11 0c0c 	adds.w	ip, r1, ip
 80026da:	f143 0300 	adc.w	r3, r3, #0
 80026de:	0259      	lsls	r1, r3, #9
 80026e0:	2300      	movs	r3, #0
 80026e2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80026e6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80026ea:	f7fd fd71 	bl	80001d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80026fa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80026fe:	e025      	b.n	800274c <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002708:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800270c:	ebb1 000c 	subs.w	r0, r1, ip
 8002710:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002714:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002718:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800271c:	0181      	lsls	r1, r0, #6
 800271e:	1a09      	subs	r1, r1, r0
 8002720:	eb63 030e 	sbc.w	r3, r3, lr
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800272a:	00c9      	lsls	r1, r1, #3
 800272c:	eb11 0c0c 	adds.w	ip, r1, ip
 8002730:	f143 0300 	adc.w	r3, r3, #0
 8002734:	0299      	lsls	r1, r3, #10
 8002736:	2300      	movs	r3, #0
 8002738:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800273c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002740:	f7fd fd46 	bl	80001d0 <__aeabi_uldivmod>
 8002744:	e7d3      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 8002746:	4803      	ldr	r0, [pc, #12]	; (8002754 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002748:	e000      	b.n	800274c <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274a:	4803      	ldr	r0, [pc, #12]	; (8002758 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800274c:	bd08      	pop	{r3, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	007a1200 	.word	0x007a1200
 8002758:	00f42400 	.word	0x00f42400

0800275c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800275c:	2800      	cmp	r0, #0
 800275e:	f000 809b 	beq.w	8002898 <HAL_RCC_ClockConfig+0x13c>
{
 8002762:	b570      	push	{r4, r5, r6, lr}
 8002764:	460d      	mov	r5, r1
 8002766:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <HAL_RCC_ClockConfig+0x14c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	428b      	cmp	r3, r1
 8002772:	d208      	bcs.n	8002786 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002774:	b2cb      	uxtb	r3, r1
 8002776:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <HAL_RCC_ClockConfig+0x14c>)
 8002778:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	428b      	cmp	r3, r1
 8002782:	f040 808b 	bne.w	800289c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	f013 0f02 	tst.w	r3, #2
 800278c:	d017      	beq.n	80027be <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278e:	f013 0f04 	tst.w	r3, #4
 8002792:	d004      	beq.n	800279e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4a45      	ldr	r2, [pc, #276]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 8002796:	6893      	ldr	r3, [r2, #8]
 8002798:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800279c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	f013 0f08 	tst.w	r3, #8
 80027a4:	d004      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a6:	4a41      	ldr	r2, [pc, #260]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 80027a8:	6893      	ldr	r3, [r2, #8]
 80027aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4a3e      	ldr	r2, [pc, #248]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 80027b2:	6893      	ldr	r3, [r2, #8]
 80027b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b8:	68a1      	ldr	r1, [r4, #8]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	f013 0f01 	tst.w	r3, #1
 80027c4:	d032      	beq.n	800282c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	6863      	ldr	r3, [r4, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d021      	beq.n	8002810 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027cc:	1e9a      	subs	r2, r3, #2
 80027ce:	2a01      	cmp	r2, #1
 80027d0:	d925      	bls.n	800281e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4a36      	ldr	r2, [pc, #216]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	f012 0f02 	tst.w	r2, #2
 80027da:	d061      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027dc:	4933      	ldr	r1, [pc, #204]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 80027de:	688a      	ldr	r2, [r1, #8]
 80027e0:	f022 0203 	bic.w	r2, r2, #3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80027e8:	f7ff fbb6 	bl	8001f58 <HAL_GetTick>
 80027ec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	6862      	ldr	r2, [r4, #4]
 80027f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027fc:	d016      	beq.n	800282c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f7ff fbab 	bl	8001f58 <HAL_GetTick>
 8002802:	1b80      	subs	r0, r0, r6
 8002804:	f241 3388 	movw	r3, #5000	; 0x1388
 8002808:	4298      	cmp	r0, r3
 800280a:	d9f0      	bls.n	80027ee <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800280c:	2003      	movs	r0, #3
 800280e:	e042      	b.n	8002896 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002810:	4a26      	ldr	r2, [pc, #152]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002818:	d1e0      	bne.n	80027dc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e03b      	b.n	8002896 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281e:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002826:	d1d9      	bne.n	80027dc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
 800282a:	e034      	b.n	8002896 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCC_ClockConfig+0x14c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	42ab      	cmp	r3, r5
 8002836:	d907      	bls.n	8002848 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002838:	b2ea      	uxtb	r2, r5
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_ClockConfig+0x14c>)
 800283c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	42ab      	cmp	r3, r5
 8002846:	d12d      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	f013 0f04 	tst.w	r3, #4
 800284e:	d006      	beq.n	800285e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002850:	4a16      	ldr	r2, [pc, #88]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 8002852:	6893      	ldr	r3, [r2, #8]
 8002854:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002858:	68e1      	ldr	r1, [r4, #12]
 800285a:	430b      	orrs	r3, r1
 800285c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	f013 0f08 	tst.w	r3, #8
 8002864:	d007      	beq.n	8002876 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002866:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 8002868:	6893      	ldr	r3, [r2, #8]
 800286a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800286e:	6921      	ldr	r1, [r4, #16]
 8002870:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002874:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002876:	f7ff ff07 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_RCC_ClockConfig+0x150>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <HAL_RCC_ClockConfig+0x154>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	40d8      	lsrs	r0, r3
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_RCC_ClockConfig+0x158>)
 800288a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x15c>)
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	f7ff fb16 	bl	8001ec0 <HAL_InitTick>
  return HAL_OK;
 8002894:	2000      	movs	r0, #0
}
 8002896:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002898:	2001      	movs	r0, #1
}
 800289a:	4770      	bx	lr
      return HAL_ERROR;
 800289c:	2001      	movs	r0, #1
 800289e:	e7fa      	b.n	8002896 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
 80028a2:	e7f8      	b.n	8002896 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
 80028a6:	e7f6      	b.n	8002896 <HAL_RCC_ClockConfig+0x13a>
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	080029b4 	.word	0x080029b4
 80028b4:	20000000 	.word	0x20000000
 80028b8:	2000000c 	.word	0x2000000c

080028bc <main>:

/*
 * brief: main function
 */
int main(void)
{
 80028bc:	b508      	push	{r3, lr}
	hwInit();
 80028be:	f7fd ff75 	bl	80007ac <hwInit>
	appInit();
 80028c2:	f7fd fe5b 	bl	800057c <appInit>

	appMain();
 80028c6:	f7fd fe8d 	bl	80005e4 <appMain>
}
 80028ca:	2000      	movs	r0, #0
 80028cc:	bd08      	pop	{r3, pc}
	...

080028d0 <__libc_init_array>:
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	4d0d      	ldr	r5, [pc, #52]	; (8002908 <__libc_init_array+0x38>)
 80028d4:	4c0d      	ldr	r4, [pc, #52]	; (800290c <__libc_init_array+0x3c>)
 80028d6:	1b64      	subs	r4, r4, r5
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	2600      	movs	r6, #0
 80028dc:	42a6      	cmp	r6, r4
 80028de:	d109      	bne.n	80028f4 <__libc_init_array+0x24>
 80028e0:	4d0b      	ldr	r5, [pc, #44]	; (8002910 <__libc_init_array+0x40>)
 80028e2:	4c0c      	ldr	r4, [pc, #48]	; (8002914 <__libc_init_array+0x44>)
 80028e4:	f000 f82e 	bl	8002944 <_init>
 80028e8:	1b64      	subs	r4, r4, r5
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	2600      	movs	r6, #0
 80028ee:	42a6      	cmp	r6, r4
 80028f0:	d105      	bne.n	80028fe <__libc_init_array+0x2e>
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
 80028f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f8:	4798      	blx	r3
 80028fa:	3601      	adds	r6, #1
 80028fc:	e7ee      	b.n	80028dc <__libc_init_array+0xc>
 80028fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002902:	4798      	blx	r3
 8002904:	3601      	adds	r6, #1
 8002906:	e7f2      	b.n	80028ee <__libc_init_array+0x1e>
 8002908:	080029d4 	.word	0x080029d4
 800290c:	080029d4 	.word	0x080029d4
 8002910:	080029d4 	.word	0x080029d4
 8002914:	080029d8 	.word	0x080029d8

08002918 <memcpy>:
 8002918:	440a      	add	r2, r1
 800291a:	4291      	cmp	r1, r2
 800291c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002920:	d100      	bne.n	8002924 <memcpy+0xc>
 8002922:	4770      	bx	lr
 8002924:	b510      	push	{r4, lr}
 8002926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800292a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800292e:	4291      	cmp	r1, r2
 8002930:	d1f9      	bne.n	8002926 <memcpy+0xe>
 8002932:	bd10      	pop	{r4, pc}

08002934 <memset>:
 8002934:	4402      	add	r2, r0
 8002936:	4603      	mov	r3, r0
 8002938:	4293      	cmp	r3, r2
 800293a:	d100      	bne.n	800293e <memset+0xa>
 800293c:	4770      	bx	lr
 800293e:	f803 1b01 	strb.w	r1, [r3], #1
 8002942:	e7f9      	b.n	8002938 <memset+0x4>

08002944 <_init>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr

08002950 <_fini>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	bf00      	nop
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr
